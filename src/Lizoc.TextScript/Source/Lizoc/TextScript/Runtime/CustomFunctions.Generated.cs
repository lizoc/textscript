// -----------------------------------------------------------------------
// <copyright file="CustomFunctions.Generated.cs" repo="TextScript">
//     Copyright (C) 2018 Lizoc Inc. <http://www.lizoc.com>
//     The source code in this file is subject to the MIT license.
//     See the LICENSE file in the repository root directory for more information.
//     All or part thereof may be subject to other licenses documented below this header and 
//     the THIRD-PARTY-LICENSE file in the repository root directory.
// </copyright>
// -----------------------------------------------------------------------

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 4.0.30319.42000
//     Custom Build Tool: TextScriptCodeGen
//     Last Updated: 28/12/2018 4:48:55 PM
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//            
//     WARNING! DO NOT EDIT MANUALLY. To generate this file, you need to build 
//     Lizoc.TextScript.dll first. then use TextScriptCodeGen to generate this 
//     file. Replace this file with the generated output and rebuild the project.
//     You only need to update this file if you made changes to any file in 
//     the 'Lizoc.TextScript.Functions' namespace.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Reflection;
using Lizoc.TextScript.Parsing;
using Lizoc.TextScript.Syntax;
using TSF = Lizoc.TextScript.Functions;
using RS = Lizoc.TextScript.RS;

namespace Lizoc.TextScript.Runtime
{
    public abstract partial class DynamicCustomFunction
    {

        static DynamicCustomFunction()
        {

            BuiltinFunctions.Add(typeof(TSF.ArrayFunctions).GetTypeInfo().GetDeclaredMethod(nameof(TSF.ArrayFunctions.Has)), method => new Function_bool_IEnumerable_object_bool___Opt(method));
            BuiltinFunctions.Add(typeof(TSF.MathFunctions).GetTypeInfo().GetDeclaredMethod(nameof(TSF.MathFunctions.IsNumber)), method => new Function_bool_object(method));
            BuiltinFunctions.Add(typeof(TSF.StringFunctions).GetTypeInfo().GetDeclaredMethod(nameof(TSF.StringFunctions.Contains)), method => new Function_bool_string_string(method));
            BuiltinFunctions.Add(typeof(TSF.FileSystemFunctions).GetTypeInfo().GetDeclaredMethod(nameof(TSF.FileSystemFunctions.Test)), method => new Function_bool_TemplateContext_SourceSpan_string_string___Opt(method));
            BuiltinFunctions.Add(typeof(TSF.DateTimeFunctions).GetTypeInfo().GetDeclaredMethod(nameof(TSF.DateTimeFunctions.Now)), method => new Function_DateTime(method));
            BuiltinFunctions.Add(typeof(TSF.DateTimeFunctions).GetTypeInfo().GetDeclaredMethod(nameof(TSF.DateTimeFunctions.AddDays)), method => new Function_DateTime_DateTime_double(method));
            BuiltinFunctions.Add(typeof(TSF.DateTimeFunctions).GetTypeInfo().GetDeclaredMethod(nameof(TSF.DateTimeFunctions.AddMonths)), method => new Function_DateTime_DateTime_int(method));
            BuiltinFunctions.Add(typeof(TSF.MathFunctions).GetTypeInfo().GetDeclaredMethod(nameof(TSF.MathFunctions.Ceil)), method => new Function_double_double(method));
            BuiltinFunctions.Add(typeof(TSF.MathFunctions).GetTypeInfo().GetDeclaredMethod(nameof(TSF.MathFunctions.Round)), method => new Function_double_double_int___Opt(method));
            BuiltinFunctions.Add(typeof(TSF.ArrayFunctions).GetTypeInfo().GetDeclaredMethod(nameof(TSF.ArrayFunctions.Reverse)), method => new Function_IEnumerable_IEnumerable(method));
            BuiltinFunctions.Add(typeof(TSF.ArrayFunctions).GetTypeInfo().GetDeclaredMethod(nameof(TSF.ArrayFunctions.AddRange)), method => new Function_IEnumerable_IEnumerable_IEnumerable(method));
            BuiltinFunctions.Add(typeof(TSF.StringFunctions).GetTypeInfo().GetDeclaredMethod(nameof(TSF.StringFunctions.Split)), method => new Function_IEnumerable_string_string(method));
            BuiltinFunctions.Add(typeof(TSF.ArrayFunctions).GetTypeInfo().GetDeclaredMethod(nameof(TSF.ArrayFunctions.Sort)), method => new Function_IEnumerable_TemplateContext_SourceSpan_object_string___Opt(method));
            BuiltinFunctions.Add(typeof(TSF.ArrayFunctions).GetTypeInfo().GetDeclaredMethod(nameof(TSF.ArrayFunctions.Map)), method => new Function_IEnumerable_TemplateContext_SourceSpan_object_string(method));
            BuiltinFunctions.Add(typeof(TSF.FileSystemFunctions).GetTypeInfo().GetDeclaredMethod(nameof(TSF.FileSystemFunctions.Dir)), method => new Function_IEnumerable_TemplateContext_SourceSpan_string_string___Opt(method));
            BuiltinFunctions.Add(typeof(TSF.ArrayFunctions).GetTypeInfo().GetDeclaredMethod(nameof(TSF.ArrayFunctions.RemoveAt)), method => new Function_IList_IList_int(method));
            BuiltinFunctions.Add(typeof(TSF.ArrayFunctions).GetTypeInfo().GetDeclaredMethod(nameof(TSF.ArrayFunctions.InsertAt)), method => new Function_IList_IList_int_object(method));
            BuiltinFunctions.Add(typeof(TSF.ArrayFunctions).GetTypeInfo().GetDeclaredMethod(nameof(TSF.ArrayFunctions.Add)), method => new Function_IList_IList_object(method));
            BuiltinFunctions.Add(typeof(TSF.ArrayFunctions).GetTypeInfo().GetDeclaredMethod(nameof(TSF.ArrayFunctions.Size)), method => new Function_int_IEnumerable(method));
            BuiltinFunctions.Add(typeof(TSF.StringFunctions).GetTypeInfo().GetDeclaredMethod(nameof(TSF.StringFunctions.Size)), method => new Function_int_string(method));
            BuiltinFunctions.Add(typeof(TSF.ObjectFunctions).GetTypeInfo().GetDeclaredMethod(nameof(TSF.ObjectFunctions.Size)), method => new Function_int_TemplateContext_SourceSpan_object(method));
            BuiltinFunctions.Add(typeof(TSF.ArrayFunctions).GetTypeInfo().GetDeclaredMethod(nameof(TSF.ArrayFunctions.First)), method => new Function_object_IEnumerable(method));
            BuiltinFunctions.Add(typeof(TSF.ObjectFunctions).GetTypeInfo().GetDeclaredMethod(nameof(TSF.ObjectFunctions.Default)), method => new Function_object_object_object(method));
            BuiltinFunctions.Add(typeof(TSF.MathFunctions).GetTypeInfo().GetDeclaredMethod(nameof(TSF.MathFunctions.DividedBy)), method => new Function_object_TemplateContext_SourceSpan_double_object(method));
            BuiltinFunctions.Add(typeof(TSF.ArrayFunctions).GetTypeInfo().GetDeclaredMethod(nameof(TSF.ArrayFunctions.Cycle)), method => new Function_object_TemplateContext_SourceSpan_IList_object___Opt(method));
            BuiltinFunctions.Add(typeof(TSF.MathFunctions).GetTypeInfo().GetDeclaredMethod(nameof(TSF.MathFunctions.Abs)), method => new Function_object_TemplateContext_SourceSpan_object(method));
            BuiltinFunctions.Add(typeof(TSF.MathFunctions).GetTypeInfo().GetDeclaredMethod(nameof(TSF.MathFunctions.Minus)), method => new Function_object_TemplateContext_SourceSpan_object_object(method));
            BuiltinFunctions.Add(typeof(TSF.StringFunctions).GetTypeInfo().GetDeclaredMethod(nameof(TSF.StringFunctions.ToInt)), method => new Function_object_TemplateContext_string(method));
            BuiltinFunctions.Add(typeof(TSF.ArrayFunctions).GetTypeInfo().GetDeclaredMethod(nameof(TSF.ArrayFunctions.Compact)), method => new Function_ScriptArray_IEnumerable(method));
            BuiltinFunctions.Add(typeof(TSF.ArrayFunctions).GetTypeInfo().GetDeclaredMethod(nameof(TSF.ArrayFunctions.Limit)), method => new Function_ScriptArray_IEnumerable_int(method));
            BuiltinFunctions.Add(typeof(TSF.RegexFunctions).GetTypeInfo().GetDeclaredMethod(nameof(TSF.RegexFunctions.Match)), method => new Function_ScriptArray_TemplateContext_string_string_string___Opt(method));
            BuiltinFunctions.Add(typeof(TSF.ObjectFunctions).GetTypeInfo().GetDeclaredMethod(nameof(TSF.ObjectFunctions.FromString)), method => new Function_ScriptObject_TemplateContext_SourceSpan_string(method));
            BuiltinFunctions.Add(typeof(TSF.StringFunctions).GetTypeInfo().GetDeclaredMethod(nameof(TSF.StringFunctions.Bool)), method => new Function_string_bool_string_string(method));
            BuiltinFunctions.Add(typeof(TSF.ArrayFunctions).GetTypeInfo().GetDeclaredMethod(nameof(TSF.ArrayFunctions.ReplaceEmpty)), method => new Function_string_IEnumerable_string_string___Opt(method));
            BuiltinFunctions.Add(typeof(TSF.StringFunctions).GetTypeInfo().GetDeclaredMethod(nameof(TSF.StringFunctions.Pluralize)), method => new Function_string_int_string_string(method));
            BuiltinFunctions.Add(typeof(TSF.ObjectFunctions).GetTypeInfo().GetDeclaredMethod(nameof(TSF.ObjectFunctions.Typeof)), method => new Function_string_object(method));
            BuiltinFunctions.Add(typeof(TSF.HtmlFunctions).GetTypeInfo().GetDeclaredMethod(nameof(TSF.HtmlFunctions.Escape)), method => new Function_string_string(method));
            BuiltinFunctions.Add(typeof(TSF.StringFunctions).GetTypeInfo().GetDeclaredMethod(nameof(TSF.StringFunctions.PadLeft)), method => new Function_string_string_int_Char___Opt(method));
            BuiltinFunctions.Add(typeof(TSF.StringFunctions).GetTypeInfo().GetDeclaredMethod(nameof(TSF.StringFunctions.Slice)), method => new Function_string_string_int_int___Opt(method));
            BuiltinFunctions.Add(typeof(TSF.StringFunctions).GetTypeInfo().GetDeclaredMethod(nameof(TSF.StringFunctions.Truncate)), method => new Function_string_string_int_string___Opt(method));
            BuiltinFunctions.Add(typeof(TSF.StringFunctions).GetTypeInfo().GetDeclaredMethod(nameof(TSF.StringFunctions.Append)), method => new Function_string_string_string(method));
            BuiltinFunctions.Add(typeof(TSF.StringFunctions).GetTypeInfo().GetDeclaredMethod(nameof(TSF.StringFunctions.ReplaceEmpty)), method => new Function_string_string_string_string___Opt(method));
            BuiltinFunctions.Add(typeof(TSF.StringFunctions).GetTypeInfo().GetDeclaredMethod(nameof(TSF.StringFunctions.Replace)), method => new Function_string_string_string_string(method));
            BuiltinFunctions.Add(typeof(TSF.ArrayFunctions).GetTypeInfo().GetDeclaredMethod(nameof(TSF.ArrayFunctions.Join)), method => new Function_string_TemplateContext_SourceSpan_IEnumerable_string_string___Opt(method));
            BuiltinFunctions.Add(typeof(TSF.MathFunctions).GetTypeInfo().GetDeclaredMethod(nameof(TSF.MathFunctions.Format)), method => new Function_string_TemplateContext_SourceSpan_object_string_string___Opt(method));
            BuiltinFunctions.Add(typeof(TSF.HtmlFunctions).GetTypeInfo().GetDeclaredMethod(nameof(TSF.HtmlFunctions.Strip)), method => new Function_string_TemplateContext_string(method));
            BuiltinFunctions.Add(typeof(TSF.RegexFunctions).GetTypeInfo().GetDeclaredMethod(nameof(TSF.RegexFunctions.Replace)), method => new Function_string_TemplateContext_string_string_string_string___Opt(method));
            BuiltinFunctions.Add(typeof(TSF.TimeSpanFunctions).GetTypeInfo().GetDeclaredMethod(nameof(TSF.TimeSpanFunctions.FromDays)), method => new Function_TimeSpan_double(method));
            BuiltinFunctions.Add(typeof(TSF.TimeSpanFunctions).GetTypeInfo().GetDeclaredMethod(nameof(TSF.TimeSpanFunctions.Parse)), method => new Function_TimeSpan_string(method));

        }


        /// <summary>
        /// Optimized custom function for: bool (IEnumerable, object, bool = ...)
        /// </summary>
        private class Function_bool_IEnumerable_object_bool___Opt : DynamicCustomFunction
        {
            private delegate bool InternalDelegate(IEnumerable arg0, object arg1, bool arg2);

            private readonly InternalDelegate _delegate;
            private readonly bool defaultArg2;

            public Function_bool_IEnumerable_object_bool___Opt(MethodInfo method)
                : base(method)
            {
                _delegate = (InternalDelegate)method.CreateDelegate(typeof(InternalDelegate));
                defaultArg2 = (bool)Parameters[2].DefaultValue;
            }

            public override object Invoke(TemplateContext context, ScriptNode callerContext, ScriptArray arguments, ScriptBlockStatement blockStatement)
            {
                if (arguments.Count < 2 || arguments.Count > 3)
                {
                    string argCheckConditionError = string.Format(RS.BadFunctionInvokeArgCountMin, callerContext, arguments.Count, 2);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckConditionError);
                }
                var arg0 = default(IEnumerable);
                var arg1 = default(object);
                var arg2 = defaultArg2;
                int argMask = 4;

                int argOrderedIndex = 0;
                for (int i = 0; i < arguments.Count; i++)
                {
                    int argIndex = 0;
                    var arg = arguments[i];
                    var namedArg = arg as ScriptNamedArgument;
                    if (namedArg != null)
                    {
                        Type argType;
                        arg = GetNamedArgument(context, callerContext, namedArg, out argIndex, out argType);
                        argIndex -= 0;
                    }
                    else
                    {
                        argIndex = argOrderedIndex;
                        argOrderedIndex++;
                    }


                    switch (argIndex)
                    {

                        case 0:
                            arg0 = (IEnumerable)context.ToObject(callerContext.Span, arg, typeof(IEnumerable));
                            argMask |= (1 << 0);
                            break;
                        case 1:
                            arg1 = arg;
                            argMask |= (1 << 1);
                            break;
                        case 2:
                            arg2 = (bool)context.ToObject(callerContext.Span, arg, typeof(bool));
                            break;


                    }

                }

                if (argMask != (1 << 3) - 1)
                {
                    string argCheckMaskError = string.Format(RS.BadFunctionInvokeArgCountMin, callerContext, arguments.Count, 2);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckMaskError);
                }

                return _delegate(arg0, arg1, arg2);
            }
        }

        /// <summary>
        /// Optimized custom function for: bool (object)
        /// </summary>
        private class Function_bool_object : DynamicCustomFunction
        {
            private delegate bool InternalDelegate(object arg0);

            private readonly InternalDelegate _delegate;

            public Function_bool_object(MethodInfo method)
                : base(method)
            {
                _delegate = (InternalDelegate)method.CreateDelegate(typeof(InternalDelegate));
            }

            public override object Invoke(TemplateContext context, ScriptNode callerContext, ScriptArray arguments, ScriptBlockStatement blockStatement)
            {
                if (arguments.Count != 1)
                {
                    string argCheckConditionError = string.Format(RS.BadFunctionInvokeArgCountExact, callerContext, arguments.Count, 1);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckConditionError);
                }
                var arg0 = default(object);
                int argMask = 0;

                int argOrderedIndex = 0;
                for (int i = 0; i < arguments.Count; i++)
                {
                    int argIndex = 0;
                    var arg = arguments[i];
                    var namedArg = arg as ScriptNamedArgument;
                    if (namedArg != null)
                    {
                        Type argType;
                        arg = GetNamedArgument(context, callerContext, namedArg, out argIndex, out argType);
                        argIndex -= 0;
                    }
                    else
                    {
                        argIndex = argOrderedIndex;
                        argOrderedIndex++;
                    }


                    switch (argIndex)
                    {

                        case 0:
                            arg0 = arg;
                            argMask |= (1 << 0);
                            break;


                    }

                }

                if (argMask != (1 << 1) - 1)
                {
                    string argCheckMaskError = string.Format(RS.BadFunctionInvokeArgCountExact, callerContext, arguments.Count, 1);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckMaskError);
                }

                return _delegate(arg0);
            }
        }

        /// <summary>
        /// Optimized custom function for: bool (string, string)
        /// </summary>
        private class Function_bool_string_string : DynamicCustomFunction
        {
            private delegate bool InternalDelegate(string arg0, string arg1);

            private readonly InternalDelegate _delegate;

            public Function_bool_string_string(MethodInfo method)
                : base(method)
            {
                _delegate = (InternalDelegate)method.CreateDelegate(typeof(InternalDelegate));
            }

            public override object Invoke(TemplateContext context, ScriptNode callerContext, ScriptArray arguments, ScriptBlockStatement blockStatement)
            {
                if (arguments.Count != 2)
                {
                    string argCheckConditionError = string.Format(RS.BadFunctionInvokeArgCountExact, callerContext, arguments.Count, 2);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckConditionError);
                }
                var arg0 = default(string);
                var arg1 = default(string);
                int argMask = 0;

                int argOrderedIndex = 0;
                for (int i = 0; i < arguments.Count; i++)
                {
                    int argIndex = 0;
                    var arg = arguments[i];
                    var namedArg = arg as ScriptNamedArgument;
                    if (namedArg != null)
                    {
                        Type argType;
                        arg = GetNamedArgument(context, callerContext, namedArg, out argIndex, out argType);
                        argIndex -= 0;
                    }
                    else
                    {
                        argIndex = argOrderedIndex;
                        argOrderedIndex++;
                    }


                    switch (argIndex)
                    {

                        case 0:
                            arg0 = context.ToString(callerContext.Span, arg);
                            argMask |= (1 << 0);
                            break;
                        case 1:
                            arg1 = context.ToString(callerContext.Span, arg);
                            argMask |= (1 << 1);
                            break;


                    }

                }

                if (argMask != (1 << 2) - 1)
                {
                    string argCheckMaskError = string.Format(RS.BadFunctionInvokeArgCountExact, callerContext, arguments.Count, 2);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckMaskError);
                }

                return _delegate(arg0, arg1);
            }
        }

        /// <summary>
        /// Optimized custom function for: bool (TemplateContext, SourceSpan, string, string = ...)
        /// </summary>
        private class Function_bool_TemplateContext_SourceSpan_string_string___Opt : DynamicCustomFunction
        {
            private delegate bool InternalDelegate(TemplateContext arg0, SourceSpan arg1, string arg2, string arg3);

            private readonly InternalDelegate _delegate;
            private readonly string defaultArg1;

            public Function_bool_TemplateContext_SourceSpan_string_string___Opt(MethodInfo method)
                : base(method)
            {
                _delegate = (InternalDelegate)method.CreateDelegate(typeof(InternalDelegate));
                defaultArg1 = (string)Parameters[3].DefaultValue;
            }

            public override object Invoke(TemplateContext context, ScriptNode callerContext, ScriptArray arguments, ScriptBlockStatement blockStatement)
            {
                if (arguments.Count < 1 || arguments.Count > 2)
                {
                    string argCheckConditionError = string.Format(RS.BadFunctionInvokeArgCountMin, callerContext, arguments.Count, 1);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckConditionError);
                }
                var arg0 = default(string);
                var arg1 = defaultArg1;
                int argMask = 2;

                int argOrderedIndex = 0;
                for (int i = 0; i < arguments.Count; i++)
                {
                    int argIndex = 0;
                    var arg = arguments[i];
                    var namedArg = arg as ScriptNamedArgument;
                    if (namedArg != null)
                    {
                        Type argType;
                        arg = GetNamedArgument(context, callerContext, namedArg, out argIndex, out argType);
                        argIndex -= 2;
                    }
                    else
                    {
                        argIndex = argOrderedIndex;
                        argOrderedIndex++;
                    }


                    switch (argIndex)
                    {

                        case 0:
                            arg0 = context.ToString(callerContext.Span, arg);
                            argMask |= (1 << 0);
                            break;
                        case 1:
                            arg1 = context.ToString(callerContext.Span, arg);
                            break;


                    }

                }

                if (argMask != (1 << 2) - 1)
                {
                    string argCheckMaskError = string.Format(RS.BadFunctionInvokeArgCountMin, callerContext, arguments.Count, 1);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckMaskError);
                }

                return _delegate(context, callerContext.Span, arg0, arg1);
            }
        }

        /// <summary>
        /// Optimized custom function for: DateTime ()
        /// </summary>
        private class Function_DateTime : DynamicCustomFunction
        {
            private delegate DateTime InternalDelegate();

            private readonly InternalDelegate _delegate;

            public Function_DateTime(MethodInfo method)
                : base(method)
            {
                _delegate = (InternalDelegate)method.CreateDelegate(typeof(InternalDelegate));
            }

            public override object Invoke(TemplateContext context, ScriptNode callerContext, ScriptArray arguments, ScriptBlockStatement blockStatement)
            {
                if (arguments.Count != 0)
                {
                    string argCheckConditionError = string.Format(RS.BadFunctionInvokeArgCountExact, callerContext, arguments.Count, 0);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckConditionError);
                }
                int argMask = 0;

                int argOrderedIndex = 0;
                for (int i = 0; i < arguments.Count; i++)
                {
                    int argIndex = 0;
                    var arg = arguments[i];
                    var namedArg = arg as ScriptNamedArgument;
                    if (namedArg != null)
                    {
                        Type argType;
                        arg = GetNamedArgument(context, callerContext, namedArg, out argIndex, out argType);
                        argIndex -= 0;
                    }
                    else
                    {
                        argIndex = argOrderedIndex;
                        argOrderedIndex++;
                    }




                }

                if (argMask != (1 << 0) - 1)
                {
                    string argCheckMaskError = string.Format(RS.BadFunctionInvokeArgCountExact, callerContext, arguments.Count, 0);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckMaskError);
                }

                return _delegate();
            }
        }

        /// <summary>
        /// Optimized custom function for: DateTime (DateTime, double)
        /// </summary>
        private class Function_DateTime_DateTime_double : DynamicCustomFunction
        {
            private delegate DateTime InternalDelegate(DateTime arg0, double arg1);

            private readonly InternalDelegate _delegate;

            public Function_DateTime_DateTime_double(MethodInfo method)
                : base(method)
            {
                _delegate = (InternalDelegate)method.CreateDelegate(typeof(InternalDelegate));
            }

            public override object Invoke(TemplateContext context, ScriptNode callerContext, ScriptArray arguments, ScriptBlockStatement blockStatement)
            {
                if (arguments.Count != 2)
                {
                    string argCheckConditionError = string.Format(RS.BadFunctionInvokeArgCountExact, callerContext, arguments.Count, 2);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckConditionError);
                }
                var arg0 = default(DateTime);
                var arg1 = default(double);
                int argMask = 0;

                int argOrderedIndex = 0;
                for (int i = 0; i < arguments.Count; i++)
                {
                    int argIndex = 0;
                    var arg = arguments[i];
                    var namedArg = arg as ScriptNamedArgument;
                    if (namedArg != null)
                    {
                        Type argType;
                        arg = GetNamedArgument(context, callerContext, namedArg, out argIndex, out argType);
                        argIndex -= 0;
                    }
                    else
                    {
                        argIndex = argOrderedIndex;
                        argOrderedIndex++;
                    }


                    switch (argIndex)
                    {

                        case 0:
                            arg0 = (DateTime)context.ToObject(callerContext.Span, arg, typeof(DateTime));
                            argMask |= (1 << 0);
                            break;
                        case 1:
                            arg1 = (double)context.ToObject(callerContext.Span, arg, typeof(double));
                            argMask |= (1 << 1);
                            break;


                    }

                }

                if (argMask != (1 << 2) - 1)
                {
                    string argCheckMaskError = string.Format(RS.BadFunctionInvokeArgCountExact, callerContext, arguments.Count, 2);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckMaskError);
                }

                return _delegate(arg0, arg1);
            }
        }

        /// <summary>
        /// Optimized custom function for: DateTime (DateTime, int)
        /// </summary>
        private class Function_DateTime_DateTime_int : DynamicCustomFunction
        {
            private delegate DateTime InternalDelegate(DateTime arg0, int arg1);

            private readonly InternalDelegate _delegate;

            public Function_DateTime_DateTime_int(MethodInfo method)
                : base(method)
            {
                _delegate = (InternalDelegate)method.CreateDelegate(typeof(InternalDelegate));
            }

            public override object Invoke(TemplateContext context, ScriptNode callerContext, ScriptArray arguments, ScriptBlockStatement blockStatement)
            {
                if (arguments.Count != 2)
                {
                    string argCheckConditionError = string.Format(RS.BadFunctionInvokeArgCountExact, callerContext, arguments.Count, 2);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckConditionError);
                }
                var arg0 = default(DateTime);
                var arg1 = default(int);
                int argMask = 0;

                int argOrderedIndex = 0;
                for (int i = 0; i < arguments.Count; i++)
                {
                    int argIndex = 0;
                    var arg = arguments[i];
                    var namedArg = arg as ScriptNamedArgument;
                    if (namedArg != null)
                    {
                        Type argType;
                        arg = GetNamedArgument(context, callerContext, namedArg, out argIndex, out argType);
                        argIndex -= 0;
                    }
                    else
                    {
                        argIndex = argOrderedIndex;
                        argOrderedIndex++;
                    }


                    switch (argIndex)
                    {

                        case 0:
                            arg0 = (DateTime)context.ToObject(callerContext.Span, arg, typeof(DateTime));
                            argMask |= (1 << 0);
                            break;
                        case 1:
                            arg1 = context.ToInt(callerContext.Span, arg);
                            argMask |= (1 << 1);
                            break;


                    }

                }

                if (argMask != (1 << 2) - 1)
                {
                    string argCheckMaskError = string.Format(RS.BadFunctionInvokeArgCountExact, callerContext, arguments.Count, 2);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckMaskError);
                }

                return _delegate(arg0, arg1);
            }
        }

        /// <summary>
        /// Optimized custom function for: double (double)
        /// </summary>
        private class Function_double_double : DynamicCustomFunction
        {
            private delegate double InternalDelegate(double arg0);

            private readonly InternalDelegate _delegate;

            public Function_double_double(MethodInfo method)
                : base(method)
            {
                _delegate = (InternalDelegate)method.CreateDelegate(typeof(InternalDelegate));
            }

            public override object Invoke(TemplateContext context, ScriptNode callerContext, ScriptArray arguments, ScriptBlockStatement blockStatement)
            {
                if (arguments.Count != 1)
                {
                    string argCheckConditionError = string.Format(RS.BadFunctionInvokeArgCountExact, callerContext, arguments.Count, 1);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckConditionError);
                }
                var arg0 = default(double);
                int argMask = 0;

                int argOrderedIndex = 0;
                for (int i = 0; i < arguments.Count; i++)
                {
                    int argIndex = 0;
                    var arg = arguments[i];
                    var namedArg = arg as ScriptNamedArgument;
                    if (namedArg != null)
                    {
                        Type argType;
                        arg = GetNamedArgument(context, callerContext, namedArg, out argIndex, out argType);
                        argIndex -= 0;
                    }
                    else
                    {
                        argIndex = argOrderedIndex;
                        argOrderedIndex++;
                    }


                    switch (argIndex)
                    {

                        case 0:
                            arg0 = (double)context.ToObject(callerContext.Span, arg, typeof(double));
                            argMask |= (1 << 0);
                            break;


                    }

                }

                if (argMask != (1 << 1) - 1)
                {
                    string argCheckMaskError = string.Format(RS.BadFunctionInvokeArgCountExact, callerContext, arguments.Count, 1);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckMaskError);
                }

                return _delegate(arg0);
            }
        }

        /// <summary>
        /// Optimized custom function for: double (double, int = ...)
        /// </summary>
        private class Function_double_double_int___Opt : DynamicCustomFunction
        {
            private delegate double InternalDelegate(double arg0, int arg1);

            private readonly InternalDelegate _delegate;
            private readonly int defaultArg1;

            public Function_double_double_int___Opt(MethodInfo method)
                : base(method)
            {
                _delegate = (InternalDelegate)method.CreateDelegate(typeof(InternalDelegate));
                defaultArg1 = (int)Parameters[1].DefaultValue;
            }

            public override object Invoke(TemplateContext context, ScriptNode callerContext, ScriptArray arguments, ScriptBlockStatement blockStatement)
            {
                if (arguments.Count < 1 || arguments.Count > 2)
                {
                    string argCheckConditionError = string.Format(RS.BadFunctionInvokeArgCountMin, callerContext, arguments.Count, 1);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckConditionError);
                }
                var arg0 = default(double);
                var arg1 = defaultArg1;
                int argMask = 2;

                int argOrderedIndex = 0;
                for (int i = 0; i < arguments.Count; i++)
                {
                    int argIndex = 0;
                    var arg = arguments[i];
                    var namedArg = arg as ScriptNamedArgument;
                    if (namedArg != null)
                    {
                        Type argType;
                        arg = GetNamedArgument(context, callerContext, namedArg, out argIndex, out argType);
                        argIndex -= 0;
                    }
                    else
                    {
                        argIndex = argOrderedIndex;
                        argOrderedIndex++;
                    }


                    switch (argIndex)
                    {

                        case 0:
                            arg0 = (double)context.ToObject(callerContext.Span, arg, typeof(double));
                            argMask |= (1 << 0);
                            break;
                        case 1:
                            arg1 = context.ToInt(callerContext.Span, arg);
                            break;


                    }

                }

                if (argMask != (1 << 2) - 1)
                {
                    string argCheckMaskError = string.Format(RS.BadFunctionInvokeArgCountMin, callerContext, arguments.Count, 1);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckMaskError);
                }

                return _delegate(arg0, arg1);
            }
        }

        /// <summary>
        /// Optimized custom function for: IEnumerable (IEnumerable)
        /// </summary>
        private class Function_IEnumerable_IEnumerable : DynamicCustomFunction
        {
            private delegate IEnumerable InternalDelegate(IEnumerable arg0);

            private readonly InternalDelegate _delegate;

            public Function_IEnumerable_IEnumerable(MethodInfo method)
                : base(method)
            {
                _delegate = (InternalDelegate)method.CreateDelegate(typeof(InternalDelegate));
            }

            public override object Invoke(TemplateContext context, ScriptNode callerContext, ScriptArray arguments, ScriptBlockStatement blockStatement)
            {
                if (arguments.Count != 1)
                {
                    string argCheckConditionError = string.Format(RS.BadFunctionInvokeArgCountExact, callerContext, arguments.Count, 1);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckConditionError);
                }
                var arg0 = default(IEnumerable);
                int argMask = 0;

                int argOrderedIndex = 0;
                for (int i = 0; i < arguments.Count; i++)
                {
                    int argIndex = 0;
                    var arg = arguments[i];
                    var namedArg = arg as ScriptNamedArgument;
                    if (namedArg != null)
                    {
                        Type argType;
                        arg = GetNamedArgument(context, callerContext, namedArg, out argIndex, out argType);
                        argIndex -= 0;
                    }
                    else
                    {
                        argIndex = argOrderedIndex;
                        argOrderedIndex++;
                    }


                    switch (argIndex)
                    {

                        case 0:
                            arg0 = (IEnumerable)context.ToObject(callerContext.Span, arg, typeof(IEnumerable));
                            argMask |= (1 << 0);
                            break;


                    }

                }

                if (argMask != (1 << 1) - 1)
                {
                    string argCheckMaskError = string.Format(RS.BadFunctionInvokeArgCountExact, callerContext, arguments.Count, 1);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckMaskError);
                }

                return _delegate(arg0);
            }
        }

        /// <summary>
        /// Optimized custom function for: IEnumerable (IEnumerable, IEnumerable)
        /// </summary>
        private class Function_IEnumerable_IEnumerable_IEnumerable : DynamicCustomFunction
        {
            private delegate IEnumerable InternalDelegate(IEnumerable arg0, IEnumerable arg1);

            private readonly InternalDelegate _delegate;

            public Function_IEnumerable_IEnumerable_IEnumerable(MethodInfo method)
                : base(method)
            {
                _delegate = (InternalDelegate)method.CreateDelegate(typeof(InternalDelegate));
            }

            public override object Invoke(TemplateContext context, ScriptNode callerContext, ScriptArray arguments, ScriptBlockStatement blockStatement)
            {
                if (arguments.Count != 2)
                {
                    string argCheckConditionError = string.Format(RS.BadFunctionInvokeArgCountExact, callerContext, arguments.Count, 2);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckConditionError);
                }
                var arg0 = default(IEnumerable);
                var arg1 = default(IEnumerable);
                int argMask = 0;

                int argOrderedIndex = 0;
                for (int i = 0; i < arguments.Count; i++)
                {
                    int argIndex = 0;
                    var arg = arguments[i];
                    var namedArg = arg as ScriptNamedArgument;
                    if (namedArg != null)
                    {
                        Type argType;
                        arg = GetNamedArgument(context, callerContext, namedArg, out argIndex, out argType);
                        argIndex -= 0;
                    }
                    else
                    {
                        argIndex = argOrderedIndex;
                        argOrderedIndex++;
                    }


                    switch (argIndex)
                    {

                        case 0:
                            arg0 = (IEnumerable)context.ToObject(callerContext.Span, arg, typeof(IEnumerable));
                            argMask |= (1 << 0);
                            break;
                        case 1:
                            arg1 = (IEnumerable)context.ToObject(callerContext.Span, arg, typeof(IEnumerable));
                            argMask |= (1 << 1);
                            break;


                    }

                }

                if (argMask != (1 << 2) - 1)
                {
                    string argCheckMaskError = string.Format(RS.BadFunctionInvokeArgCountExact, callerContext, arguments.Count, 2);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckMaskError);
                }

                return _delegate(arg0, arg1);
            }
        }

        /// <summary>
        /// Optimized custom function for: IEnumerable (string, string)
        /// </summary>
        private class Function_IEnumerable_string_string : DynamicCustomFunction
        {
            private delegate IEnumerable InternalDelegate(string arg0, string arg1);

            private readonly InternalDelegate _delegate;

            public Function_IEnumerable_string_string(MethodInfo method)
                : base(method)
            {
                _delegate = (InternalDelegate)method.CreateDelegate(typeof(InternalDelegate));
            }

            public override object Invoke(TemplateContext context, ScriptNode callerContext, ScriptArray arguments, ScriptBlockStatement blockStatement)
            {
                if (arguments.Count != 2)
                {
                    string argCheckConditionError = string.Format(RS.BadFunctionInvokeArgCountExact, callerContext, arguments.Count, 2);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckConditionError);
                }
                var arg0 = default(string);
                var arg1 = default(string);
                int argMask = 0;

                int argOrderedIndex = 0;
                for (int i = 0; i < arguments.Count; i++)
                {
                    int argIndex = 0;
                    var arg = arguments[i];
                    var namedArg = arg as ScriptNamedArgument;
                    if (namedArg != null)
                    {
                        Type argType;
                        arg = GetNamedArgument(context, callerContext, namedArg, out argIndex, out argType);
                        argIndex -= 0;
                    }
                    else
                    {
                        argIndex = argOrderedIndex;
                        argOrderedIndex++;
                    }


                    switch (argIndex)
                    {

                        case 0:
                            arg0 = context.ToString(callerContext.Span, arg);
                            argMask |= (1 << 0);
                            break;
                        case 1:
                            arg1 = context.ToString(callerContext.Span, arg);
                            argMask |= (1 << 1);
                            break;


                    }

                }

                if (argMask != (1 << 2) - 1)
                {
                    string argCheckMaskError = string.Format(RS.BadFunctionInvokeArgCountExact, callerContext, arguments.Count, 2);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckMaskError);
                }

                return _delegate(arg0, arg1);
            }
        }

        /// <summary>
        /// Optimized custom function for: IEnumerable (TemplateContext, SourceSpan, object, string = ...)
        /// </summary>
        private class Function_IEnumerable_TemplateContext_SourceSpan_object_string___Opt : DynamicCustomFunction
        {
            private delegate IEnumerable InternalDelegate(TemplateContext arg0, SourceSpan arg1, object arg2, string arg3);

            private readonly InternalDelegate _delegate;
            private readonly string defaultArg1;

            public Function_IEnumerable_TemplateContext_SourceSpan_object_string___Opt(MethodInfo method)
                : base(method)
            {
                _delegate = (InternalDelegate)method.CreateDelegate(typeof(InternalDelegate));
                defaultArg1 = (string)Parameters[3].DefaultValue;
            }

            public override object Invoke(TemplateContext context, ScriptNode callerContext, ScriptArray arguments, ScriptBlockStatement blockStatement)
            {
                if (arguments.Count < 1 || arguments.Count > 2)
                {
                    string argCheckConditionError = string.Format(RS.BadFunctionInvokeArgCountMin, callerContext, arguments.Count, 1);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckConditionError);
                }
                var arg0 = default(object);
                var arg1 = defaultArg1;
                int argMask = 2;

                int argOrderedIndex = 0;
                for (int i = 0; i < arguments.Count; i++)
                {
                    int argIndex = 0;
                    var arg = arguments[i];
                    var namedArg = arg as ScriptNamedArgument;
                    if (namedArg != null)
                    {
                        Type argType;
                        arg = GetNamedArgument(context, callerContext, namedArg, out argIndex, out argType);
                        argIndex -= 2;
                    }
                    else
                    {
                        argIndex = argOrderedIndex;
                        argOrderedIndex++;
                    }


                    switch (argIndex)
                    {

                        case 0:
                            arg0 = arg;
                            argMask |= (1 << 0);
                            break;
                        case 1:
                            arg1 = context.ToString(callerContext.Span, arg);
                            break;


                    }

                }

                if (argMask != (1 << 2) - 1)
                {
                    string argCheckMaskError = string.Format(RS.BadFunctionInvokeArgCountMin, callerContext, arguments.Count, 1);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckMaskError);
                }

                return _delegate(context, callerContext.Span, arg0, arg1);
            }
        }

        /// <summary>
        /// Optimized custom function for: IEnumerable (TemplateContext, SourceSpan, object, string)
        /// </summary>
        private class Function_IEnumerable_TemplateContext_SourceSpan_object_string : DynamicCustomFunction
        {
            private delegate IEnumerable InternalDelegate(TemplateContext arg0, SourceSpan arg1, object arg2, string arg3);

            private readonly InternalDelegate _delegate;

            public Function_IEnumerable_TemplateContext_SourceSpan_object_string(MethodInfo method)
                : base(method)
            {
                _delegate = (InternalDelegate)method.CreateDelegate(typeof(InternalDelegate));
            }

            public override object Invoke(TemplateContext context, ScriptNode callerContext, ScriptArray arguments, ScriptBlockStatement blockStatement)
            {
                if (arguments.Count != 2)
                {
                    string argCheckConditionError = string.Format(RS.BadFunctionInvokeArgCountExact, callerContext, arguments.Count, 2);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckConditionError);
                }
                var arg0 = default(object);
                var arg1 = default(string);
                int argMask = 0;

                int argOrderedIndex = 0;
                for (int i = 0; i < arguments.Count; i++)
                {
                    int argIndex = 0;
                    var arg = arguments[i];
                    var namedArg = arg as ScriptNamedArgument;
                    if (namedArg != null)
                    {
                        Type argType;
                        arg = GetNamedArgument(context, callerContext, namedArg, out argIndex, out argType);
                        argIndex -= 2;
                    }
                    else
                    {
                        argIndex = argOrderedIndex;
                        argOrderedIndex++;
                    }


                    switch (argIndex)
                    {

                        case 0:
                            arg0 = arg;
                            argMask |= (1 << 0);
                            break;
                        case 1:
                            arg1 = context.ToString(callerContext.Span, arg);
                            argMask |= (1 << 1);
                            break;


                    }

                }

                if (argMask != (1 << 2) - 1)
                {
                    string argCheckMaskError = string.Format(RS.BadFunctionInvokeArgCountExact, callerContext, arguments.Count, 2);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckMaskError);
                }

                return _delegate(context, callerContext.Span, arg0, arg1);
            }
        }

        /// <summary>
        /// Optimized custom function for: IEnumerable (TemplateContext, SourceSpan, string, string = ...)
        /// </summary>
        private class Function_IEnumerable_TemplateContext_SourceSpan_string_string___Opt : DynamicCustomFunction
        {
            private delegate IEnumerable InternalDelegate(TemplateContext arg0, SourceSpan arg1, string arg2, string arg3);

            private readonly InternalDelegate _delegate;
            private readonly string defaultArg1;

            public Function_IEnumerable_TemplateContext_SourceSpan_string_string___Opt(MethodInfo method)
                : base(method)
            {
                _delegate = (InternalDelegate)method.CreateDelegate(typeof(InternalDelegate));
                defaultArg1 = (string)Parameters[3].DefaultValue;
            }

            public override object Invoke(TemplateContext context, ScriptNode callerContext, ScriptArray arguments, ScriptBlockStatement blockStatement)
            {
                if (arguments.Count < 1 || arguments.Count > 2)
                {
                    string argCheckConditionError = string.Format(RS.BadFunctionInvokeArgCountMin, callerContext, arguments.Count, 1);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckConditionError);
                }
                var arg0 = default(string);
                var arg1 = defaultArg1;
                int argMask = 2;

                int argOrderedIndex = 0;
                for (int i = 0; i < arguments.Count; i++)
                {
                    int argIndex = 0;
                    var arg = arguments[i];
                    var namedArg = arg as ScriptNamedArgument;
                    if (namedArg != null)
                    {
                        Type argType;
                        arg = GetNamedArgument(context, callerContext, namedArg, out argIndex, out argType);
                        argIndex -= 2;
                    }
                    else
                    {
                        argIndex = argOrderedIndex;
                        argOrderedIndex++;
                    }


                    switch (argIndex)
                    {

                        case 0:
                            arg0 = context.ToString(callerContext.Span, arg);
                            argMask |= (1 << 0);
                            break;
                        case 1:
                            arg1 = context.ToString(callerContext.Span, arg);
                            break;


                    }

                }

                if (argMask != (1 << 2) - 1)
                {
                    string argCheckMaskError = string.Format(RS.BadFunctionInvokeArgCountMin, callerContext, arguments.Count, 1);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckMaskError);
                }

                return _delegate(context, callerContext.Span, arg0, arg1);
            }
        }

        /// <summary>
        /// Optimized custom function for: IList (IList, int)
        /// </summary>
        private class Function_IList_IList_int : DynamicCustomFunction
        {
            private delegate IList InternalDelegate(IList arg0, int arg1);

            private readonly InternalDelegate _delegate;

            public Function_IList_IList_int(MethodInfo method)
                : base(method)
            {
                _delegate = (InternalDelegate)method.CreateDelegate(typeof(InternalDelegate));
            }

            public override object Invoke(TemplateContext context, ScriptNode callerContext, ScriptArray arguments, ScriptBlockStatement blockStatement)
            {
                if (arguments.Count != 2)
                {
                    string argCheckConditionError = string.Format(RS.BadFunctionInvokeArgCountExact, callerContext, arguments.Count, 2);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckConditionError);
                }
                var arg0 = default(IList);
                var arg1 = default(int);
                int argMask = 0;

                int argOrderedIndex = 0;
                for (int i = 0; i < arguments.Count; i++)
                {
                    int argIndex = 0;
                    var arg = arguments[i];
                    var namedArg = arg as ScriptNamedArgument;
                    if (namedArg != null)
                    {
                        Type argType;
                        arg = GetNamedArgument(context, callerContext, namedArg, out argIndex, out argType);
                        argIndex -= 0;
                    }
                    else
                    {
                        argIndex = argOrderedIndex;
                        argOrderedIndex++;
                    }


                    switch (argIndex)
                    {

                        case 0:
                            arg0 = context.ToList(callerContext.Span, arg);
                            argMask |= (1 << 0);
                            break;
                        case 1:
                            arg1 = context.ToInt(callerContext.Span, arg);
                            argMask |= (1 << 1);
                            break;


                    }

                }

                if (argMask != (1 << 2) - 1)
                {
                    string argCheckMaskError = string.Format(RS.BadFunctionInvokeArgCountExact, callerContext, arguments.Count, 2);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckMaskError);
                }

                return _delegate(arg0, arg1);
            }
        }

        /// <summary>
        /// Optimized custom function for: IList (IList, int, object)
        /// </summary>
        private class Function_IList_IList_int_object : DynamicCustomFunction
        {
            private delegate IList InternalDelegate(IList arg0, int arg1, object arg2);

            private readonly InternalDelegate _delegate;

            public Function_IList_IList_int_object(MethodInfo method)
                : base(method)
            {
                _delegate = (InternalDelegate)method.CreateDelegate(typeof(InternalDelegate));
            }

            public override object Invoke(TemplateContext context, ScriptNode callerContext, ScriptArray arguments, ScriptBlockStatement blockStatement)
            {
                if (arguments.Count != 3)
                {
                    string argCheckConditionError = string.Format(RS.BadFunctionInvokeArgCountExact, callerContext, arguments.Count, 3);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckConditionError);
                }
                var arg0 = default(IList);
                var arg1 = default(int);
                var arg2 = default(object);
                int argMask = 0;

                int argOrderedIndex = 0;
                for (int i = 0; i < arguments.Count; i++)
                {
                    int argIndex = 0;
                    var arg = arguments[i];
                    var namedArg = arg as ScriptNamedArgument;
                    if (namedArg != null)
                    {
                        Type argType;
                        arg = GetNamedArgument(context, callerContext, namedArg, out argIndex, out argType);
                        argIndex -= 0;
                    }
                    else
                    {
                        argIndex = argOrderedIndex;
                        argOrderedIndex++;
                    }


                    switch (argIndex)
                    {

                        case 0:
                            arg0 = context.ToList(callerContext.Span, arg);
                            argMask |= (1 << 0);
                            break;
                        case 1:
                            arg1 = context.ToInt(callerContext.Span, arg);
                            argMask |= (1 << 1);
                            break;
                        case 2:
                            arg2 = arg;
                            argMask |= (1 << 2);
                            break;


                    }

                }

                if (argMask != (1 << 3) - 1)
                {
                    string argCheckMaskError = string.Format(RS.BadFunctionInvokeArgCountExact, callerContext, arguments.Count, 3);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckMaskError);
                }

                return _delegate(arg0, arg1, arg2);
            }
        }

        /// <summary>
        /// Optimized custom function for: IList (IList, object)
        /// </summary>
        private class Function_IList_IList_object : DynamicCustomFunction
        {
            private delegate IList InternalDelegate(IList arg0, object arg1);

            private readonly InternalDelegate _delegate;

            public Function_IList_IList_object(MethodInfo method)
                : base(method)
            {
                _delegate = (InternalDelegate)method.CreateDelegate(typeof(InternalDelegate));
            }

            public override object Invoke(TemplateContext context, ScriptNode callerContext, ScriptArray arguments, ScriptBlockStatement blockStatement)
            {
                if (arguments.Count != 2)
                {
                    string argCheckConditionError = string.Format(RS.BadFunctionInvokeArgCountExact, callerContext, arguments.Count, 2);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckConditionError);
                }
                var arg0 = default(IList);
                var arg1 = default(object);
                int argMask = 0;

                int argOrderedIndex = 0;
                for (int i = 0; i < arguments.Count; i++)
                {
                    int argIndex = 0;
                    var arg = arguments[i];
                    var namedArg = arg as ScriptNamedArgument;
                    if (namedArg != null)
                    {
                        Type argType;
                        arg = GetNamedArgument(context, callerContext, namedArg, out argIndex, out argType);
                        argIndex -= 0;
                    }
                    else
                    {
                        argIndex = argOrderedIndex;
                        argOrderedIndex++;
                    }


                    switch (argIndex)
                    {

                        case 0:
                            arg0 = context.ToList(callerContext.Span, arg);
                            argMask |= (1 << 0);
                            break;
                        case 1:
                            arg1 = arg;
                            argMask |= (1 << 1);
                            break;


                    }

                }

                if (argMask != (1 << 2) - 1)
                {
                    string argCheckMaskError = string.Format(RS.BadFunctionInvokeArgCountExact, callerContext, arguments.Count, 2);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckMaskError);
                }

                return _delegate(arg0, arg1);
            }
        }

        /// <summary>
        /// Optimized custom function for: int (IEnumerable)
        /// </summary>
        private class Function_int_IEnumerable : DynamicCustomFunction
        {
            private delegate int InternalDelegate(IEnumerable arg0);

            private readonly InternalDelegate _delegate;

            public Function_int_IEnumerable(MethodInfo method)
                : base(method)
            {
                _delegate = (InternalDelegate)method.CreateDelegate(typeof(InternalDelegate));
            }

            public override object Invoke(TemplateContext context, ScriptNode callerContext, ScriptArray arguments, ScriptBlockStatement blockStatement)
            {
                if (arguments.Count != 1)
                {
                    string argCheckConditionError = string.Format(RS.BadFunctionInvokeArgCountExact, callerContext, arguments.Count, 1);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckConditionError);
                }
                var arg0 = default(IEnumerable);
                int argMask = 0;

                int argOrderedIndex = 0;
                for (int i = 0; i < arguments.Count; i++)
                {
                    int argIndex = 0;
                    var arg = arguments[i];
                    var namedArg = arg as ScriptNamedArgument;
                    if (namedArg != null)
                    {
                        Type argType;
                        arg = GetNamedArgument(context, callerContext, namedArg, out argIndex, out argType);
                        argIndex -= 0;
                    }
                    else
                    {
                        argIndex = argOrderedIndex;
                        argOrderedIndex++;
                    }


                    switch (argIndex)
                    {

                        case 0:
                            arg0 = (IEnumerable)context.ToObject(callerContext.Span, arg, typeof(IEnumerable));
                            argMask |= (1 << 0);
                            break;


                    }

                }

                if (argMask != (1 << 1) - 1)
                {
                    string argCheckMaskError = string.Format(RS.BadFunctionInvokeArgCountExact, callerContext, arguments.Count, 1);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckMaskError);
                }

                return _delegate(arg0);
            }
        }

        /// <summary>
        /// Optimized custom function for: int (string)
        /// </summary>
        private class Function_int_string : DynamicCustomFunction
        {
            private delegate int InternalDelegate(string arg0);

            private readonly InternalDelegate _delegate;

            public Function_int_string(MethodInfo method)
                : base(method)
            {
                _delegate = (InternalDelegate)method.CreateDelegate(typeof(InternalDelegate));
            }

            public override object Invoke(TemplateContext context, ScriptNode callerContext, ScriptArray arguments, ScriptBlockStatement blockStatement)
            {
                if (arguments.Count != 1)
                {
                    string argCheckConditionError = string.Format(RS.BadFunctionInvokeArgCountExact, callerContext, arguments.Count, 1);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckConditionError);
                }
                var arg0 = default(string);
                int argMask = 0;

                int argOrderedIndex = 0;
                for (int i = 0; i < arguments.Count; i++)
                {
                    int argIndex = 0;
                    var arg = arguments[i];
                    var namedArg = arg as ScriptNamedArgument;
                    if (namedArg != null)
                    {
                        Type argType;
                        arg = GetNamedArgument(context, callerContext, namedArg, out argIndex, out argType);
                        argIndex -= 0;
                    }
                    else
                    {
                        argIndex = argOrderedIndex;
                        argOrderedIndex++;
                    }


                    switch (argIndex)
                    {

                        case 0:
                            arg0 = context.ToString(callerContext.Span, arg);
                            argMask |= (1 << 0);
                            break;


                    }

                }

                if (argMask != (1 << 1) - 1)
                {
                    string argCheckMaskError = string.Format(RS.BadFunctionInvokeArgCountExact, callerContext, arguments.Count, 1);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckMaskError);
                }

                return _delegate(arg0);
            }
        }

        /// <summary>
        /// Optimized custom function for: int (TemplateContext, SourceSpan, object)
        /// </summary>
        private class Function_int_TemplateContext_SourceSpan_object : DynamicCustomFunction
        {
            private delegate int InternalDelegate(TemplateContext arg0, SourceSpan arg1, object arg2);

            private readonly InternalDelegate _delegate;

            public Function_int_TemplateContext_SourceSpan_object(MethodInfo method)
                : base(method)
            {
                _delegate = (InternalDelegate)method.CreateDelegate(typeof(InternalDelegate));
            }

            public override object Invoke(TemplateContext context, ScriptNode callerContext, ScriptArray arguments, ScriptBlockStatement blockStatement)
            {
                if (arguments.Count != 1)
                {
                    string argCheckConditionError = string.Format(RS.BadFunctionInvokeArgCountExact, callerContext, arguments.Count, 1);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckConditionError);
                }
                var arg0 = default(object);
                int argMask = 0;

                int argOrderedIndex = 0;
                for (int i = 0; i < arguments.Count; i++)
                {
                    int argIndex = 0;
                    var arg = arguments[i];
                    var namedArg = arg as ScriptNamedArgument;
                    if (namedArg != null)
                    {
                        Type argType;
                        arg = GetNamedArgument(context, callerContext, namedArg, out argIndex, out argType);
                        argIndex -= 2;
                    }
                    else
                    {
                        argIndex = argOrderedIndex;
                        argOrderedIndex++;
                    }


                    switch (argIndex)
                    {

                        case 0:
                            arg0 = arg;
                            argMask |= (1 << 0);
                            break;


                    }

                }

                if (argMask != (1 << 1) - 1)
                {
                    string argCheckMaskError = string.Format(RS.BadFunctionInvokeArgCountExact, callerContext, arguments.Count, 1);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckMaskError);
                }

                return _delegate(context, callerContext.Span, arg0);
            }
        }

        /// <summary>
        /// Optimized custom function for: object (IEnumerable)
        /// </summary>
        private class Function_object_IEnumerable : DynamicCustomFunction
        {
            private delegate object InternalDelegate(IEnumerable arg0);

            private readonly InternalDelegate _delegate;

            public Function_object_IEnumerable(MethodInfo method)
                : base(method)
            {
                _delegate = (InternalDelegate)method.CreateDelegate(typeof(InternalDelegate));
            }

            public override object Invoke(TemplateContext context, ScriptNode callerContext, ScriptArray arguments, ScriptBlockStatement blockStatement)
            {
                if (arguments.Count != 1)
                {
                    string argCheckConditionError = string.Format(RS.BadFunctionInvokeArgCountExact, callerContext, arguments.Count, 1);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckConditionError);
                }
                var arg0 = default(IEnumerable);
                int argMask = 0;

                int argOrderedIndex = 0;
                for (int i = 0; i < arguments.Count; i++)
                {
                    int argIndex = 0;
                    var arg = arguments[i];
                    var namedArg = arg as ScriptNamedArgument;
                    if (namedArg != null)
                    {
                        Type argType;
                        arg = GetNamedArgument(context, callerContext, namedArg, out argIndex, out argType);
                        argIndex -= 0;
                    }
                    else
                    {
                        argIndex = argOrderedIndex;
                        argOrderedIndex++;
                    }


                    switch (argIndex)
                    {

                        case 0:
                            arg0 = (IEnumerable)context.ToObject(callerContext.Span, arg, typeof(IEnumerable));
                            argMask |= (1 << 0);
                            break;


                    }

                }

                if (argMask != (1 << 1) - 1)
                {
                    string argCheckMaskError = string.Format(RS.BadFunctionInvokeArgCountExact, callerContext, arguments.Count, 1);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckMaskError);
                }

                return _delegate(arg0);
            }
        }

        /// <summary>
        /// Optimized custom function for: object (object, object)
        /// </summary>
        private class Function_object_object_object : DynamicCustomFunction
        {
            private delegate object InternalDelegate(object arg0, object arg1);

            private readonly InternalDelegate _delegate;

            public Function_object_object_object(MethodInfo method)
                : base(method)
            {
                _delegate = (InternalDelegate)method.CreateDelegate(typeof(InternalDelegate));
            }

            public override object Invoke(TemplateContext context, ScriptNode callerContext, ScriptArray arguments, ScriptBlockStatement blockStatement)
            {
                if (arguments.Count != 2)
                {
                    string argCheckConditionError = string.Format(RS.BadFunctionInvokeArgCountExact, callerContext, arguments.Count, 2);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckConditionError);
                }
                var arg0 = default(object);
                var arg1 = default(object);
                int argMask = 0;

                int argOrderedIndex = 0;
                for (int i = 0; i < arguments.Count; i++)
                {
                    int argIndex = 0;
                    var arg = arguments[i];
                    var namedArg = arg as ScriptNamedArgument;
                    if (namedArg != null)
                    {
                        Type argType;
                        arg = GetNamedArgument(context, callerContext, namedArg, out argIndex, out argType);
                        argIndex -= 0;
                    }
                    else
                    {
                        argIndex = argOrderedIndex;
                        argOrderedIndex++;
                    }


                    switch (argIndex)
                    {

                        case 0:
                            arg0 = arg;
                            argMask |= (1 << 0);
                            break;
                        case 1:
                            arg1 = arg;
                            argMask |= (1 << 1);
                            break;


                    }

                }

                if (argMask != (1 << 2) - 1)
                {
                    string argCheckMaskError = string.Format(RS.BadFunctionInvokeArgCountExact, callerContext, arguments.Count, 2);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckMaskError);
                }

                return _delegate(arg0, arg1);
            }
        }

        /// <summary>
        /// Optimized custom function for: object (TemplateContext, SourceSpan, double, object)
        /// </summary>
        private class Function_object_TemplateContext_SourceSpan_double_object : DynamicCustomFunction
        {
            private delegate object InternalDelegate(TemplateContext arg0, SourceSpan arg1, double arg2, object arg3);

            private readonly InternalDelegate _delegate;

            public Function_object_TemplateContext_SourceSpan_double_object(MethodInfo method)
                : base(method)
            {
                _delegate = (InternalDelegate)method.CreateDelegate(typeof(InternalDelegate));
            }

            public override object Invoke(TemplateContext context, ScriptNode callerContext, ScriptArray arguments, ScriptBlockStatement blockStatement)
            {
                if (arguments.Count != 2)
                {
                    string argCheckConditionError = string.Format(RS.BadFunctionInvokeArgCountExact, callerContext, arguments.Count, 2);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckConditionError);
                }
                var arg0 = default(double);
                var arg1 = default(object);
                int argMask = 0;

                int argOrderedIndex = 0;
                for (int i = 0; i < arguments.Count; i++)
                {
                    int argIndex = 0;
                    var arg = arguments[i];
                    var namedArg = arg as ScriptNamedArgument;
                    if (namedArg != null)
                    {
                        Type argType;
                        arg = GetNamedArgument(context, callerContext, namedArg, out argIndex, out argType);
                        argIndex -= 2;
                    }
                    else
                    {
                        argIndex = argOrderedIndex;
                        argOrderedIndex++;
                    }


                    switch (argIndex)
                    {

                        case 0:
                            arg0 = (double)context.ToObject(callerContext.Span, arg, typeof(double));
                            argMask |= (1 << 0);
                            break;
                        case 1:
                            arg1 = arg;
                            argMask |= (1 << 1);
                            break;


                    }

                }

                if (argMask != (1 << 2) - 1)
                {
                    string argCheckMaskError = string.Format(RS.BadFunctionInvokeArgCountExact, callerContext, arguments.Count, 2);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckMaskError);
                }

                return _delegate(context, callerContext.Span, arg0, arg1);
            }
        }

        /// <summary>
        /// Optimized custom function for: object (TemplateContext, SourceSpan, IList, object = ...)
        /// </summary>
        private class Function_object_TemplateContext_SourceSpan_IList_object___Opt : DynamicCustomFunction
        {
            private delegate object InternalDelegate(TemplateContext arg0, SourceSpan arg1, IList arg2, object arg3);

            private readonly InternalDelegate _delegate;
            private readonly object defaultArg1;

            public Function_object_TemplateContext_SourceSpan_IList_object___Opt(MethodInfo method)
                : base(method)
            {
                _delegate = (InternalDelegate)method.CreateDelegate(typeof(InternalDelegate));
                defaultArg1 = (object)Parameters[3].DefaultValue;
            }

            public override object Invoke(TemplateContext context, ScriptNode callerContext, ScriptArray arguments, ScriptBlockStatement blockStatement)
            {
                if (arguments.Count < 1 || arguments.Count > 2)
                {
                    string argCheckConditionError = string.Format(RS.BadFunctionInvokeArgCountMin, callerContext, arguments.Count, 1);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckConditionError);
                }
                var arg0 = default(IList);
                var arg1 = defaultArg1;
                int argMask = 2;

                int argOrderedIndex = 0;
                for (int i = 0; i < arguments.Count; i++)
                {
                    int argIndex = 0;
                    var arg = arguments[i];
                    var namedArg = arg as ScriptNamedArgument;
                    if (namedArg != null)
                    {
                        Type argType;
                        arg = GetNamedArgument(context, callerContext, namedArg, out argIndex, out argType);
                        argIndex -= 2;
                    }
                    else
                    {
                        argIndex = argOrderedIndex;
                        argOrderedIndex++;
                    }


                    switch (argIndex)
                    {

                        case 0:
                            arg0 = context.ToList(callerContext.Span, arg);
                            argMask |= (1 << 0);
                            break;
                        case 1:
                            arg1 = arg;
                            break;


                    }

                }

                if (argMask != (1 << 2) - 1)
                {
                    string argCheckMaskError = string.Format(RS.BadFunctionInvokeArgCountMin, callerContext, arguments.Count, 1);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckMaskError);
                }

                return _delegate(context, callerContext.Span, arg0, arg1);
            }
        }

        /// <summary>
        /// Optimized custom function for: object (TemplateContext, SourceSpan, object)
        /// </summary>
        private class Function_object_TemplateContext_SourceSpan_object : DynamicCustomFunction
        {
            private delegate object InternalDelegate(TemplateContext arg0, SourceSpan arg1, object arg2);

            private readonly InternalDelegate _delegate;

            public Function_object_TemplateContext_SourceSpan_object(MethodInfo method)
                : base(method)
            {
                _delegate = (InternalDelegate)method.CreateDelegate(typeof(InternalDelegate));
            }

            public override object Invoke(TemplateContext context, ScriptNode callerContext, ScriptArray arguments, ScriptBlockStatement blockStatement)
            {
                if (arguments.Count != 1)
                {
                    string argCheckConditionError = string.Format(RS.BadFunctionInvokeArgCountExact, callerContext, arguments.Count, 1);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckConditionError);
                }
                var arg0 = default(object);
                int argMask = 0;

                int argOrderedIndex = 0;
                for (int i = 0; i < arguments.Count; i++)
                {
                    int argIndex = 0;
                    var arg = arguments[i];
                    var namedArg = arg as ScriptNamedArgument;
                    if (namedArg != null)
                    {
                        Type argType;
                        arg = GetNamedArgument(context, callerContext, namedArg, out argIndex, out argType);
                        argIndex -= 2;
                    }
                    else
                    {
                        argIndex = argOrderedIndex;
                        argOrderedIndex++;
                    }


                    switch (argIndex)
                    {

                        case 0:
                            arg0 = arg;
                            argMask |= (1 << 0);
                            break;


                    }

                }

                if (argMask != (1 << 1) - 1)
                {
                    string argCheckMaskError = string.Format(RS.BadFunctionInvokeArgCountExact, callerContext, arguments.Count, 1);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckMaskError);
                }

                return _delegate(context, callerContext.Span, arg0);
            }
        }

        /// <summary>
        /// Optimized custom function for: object (TemplateContext, SourceSpan, object, object)
        /// </summary>
        private class Function_object_TemplateContext_SourceSpan_object_object : DynamicCustomFunction
        {
            private delegate object InternalDelegate(TemplateContext arg0, SourceSpan arg1, object arg2, object arg3);

            private readonly InternalDelegate _delegate;

            public Function_object_TemplateContext_SourceSpan_object_object(MethodInfo method)
                : base(method)
            {
                _delegate = (InternalDelegate)method.CreateDelegate(typeof(InternalDelegate));
            }

            public override object Invoke(TemplateContext context, ScriptNode callerContext, ScriptArray arguments, ScriptBlockStatement blockStatement)
            {
                if (arguments.Count != 2)
                {
                    string argCheckConditionError = string.Format(RS.BadFunctionInvokeArgCountExact, callerContext, arguments.Count, 2);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckConditionError);
                }
                var arg0 = default(object);
                var arg1 = default(object);
                int argMask = 0;

                int argOrderedIndex = 0;
                for (int i = 0; i < arguments.Count; i++)
                {
                    int argIndex = 0;
                    var arg = arguments[i];
                    var namedArg = arg as ScriptNamedArgument;
                    if (namedArg != null)
                    {
                        Type argType;
                        arg = GetNamedArgument(context, callerContext, namedArg, out argIndex, out argType);
                        argIndex -= 2;
                    }
                    else
                    {
                        argIndex = argOrderedIndex;
                        argOrderedIndex++;
                    }


                    switch (argIndex)
                    {

                        case 0:
                            arg0 = arg;
                            argMask |= (1 << 0);
                            break;
                        case 1:
                            arg1 = arg;
                            argMask |= (1 << 1);
                            break;


                    }

                }

                if (argMask != (1 << 2) - 1)
                {
                    string argCheckMaskError = string.Format(RS.BadFunctionInvokeArgCountExact, callerContext, arguments.Count, 2);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckMaskError);
                }

                return _delegate(context, callerContext.Span, arg0, arg1);
            }
        }

        /// <summary>
        /// Optimized custom function for: object (TemplateContext, string)
        /// </summary>
        private class Function_object_TemplateContext_string : DynamicCustomFunction
        {
            private delegate object InternalDelegate(TemplateContext arg0, string arg1);

            private readonly InternalDelegate _delegate;

            public Function_object_TemplateContext_string(MethodInfo method)
                : base(method)
            {
                _delegate = (InternalDelegate)method.CreateDelegate(typeof(InternalDelegate));
            }

            public override object Invoke(TemplateContext context, ScriptNode callerContext, ScriptArray arguments, ScriptBlockStatement blockStatement)
            {
                if (arguments.Count != 1)
                {
                    string argCheckConditionError = string.Format(RS.BadFunctionInvokeArgCountExact, callerContext, arguments.Count, 1);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckConditionError);
                }
                var arg0 = default(string);
                int argMask = 0;

                int argOrderedIndex = 0;
                for (int i = 0; i < arguments.Count; i++)
                {
                    int argIndex = 0;
                    var arg = arguments[i];
                    var namedArg = arg as ScriptNamedArgument;
                    if (namedArg != null)
                    {
                        Type argType;
                        arg = GetNamedArgument(context, callerContext, namedArg, out argIndex, out argType);
                        argIndex -= 1;
                    }
                    else
                    {
                        argIndex = argOrderedIndex;
                        argOrderedIndex++;
                    }


                    switch (argIndex)
                    {

                        case 0:
                            arg0 = context.ToString(callerContext.Span, arg);
                            argMask |= (1 << 0);
                            break;


                    }

                }

                if (argMask != (1 << 1) - 1)
                {
                    string argCheckMaskError = string.Format(RS.BadFunctionInvokeArgCountExact, callerContext, arguments.Count, 1);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckMaskError);
                }

                return _delegate(context, arg0);
            }
        }

        /// <summary>
        /// Optimized custom function for: ScriptArray (IEnumerable)
        /// </summary>
        private class Function_ScriptArray_IEnumerable : DynamicCustomFunction
        {
            private delegate ScriptArray InternalDelegate(IEnumerable arg0);

            private readonly InternalDelegate _delegate;

            public Function_ScriptArray_IEnumerable(MethodInfo method)
                : base(method)
            {
                _delegate = (InternalDelegate)method.CreateDelegate(typeof(InternalDelegate));
            }

            public override object Invoke(TemplateContext context, ScriptNode callerContext, ScriptArray arguments, ScriptBlockStatement blockStatement)
            {
                if (arguments.Count != 1)
                {
                    string argCheckConditionError = string.Format(RS.BadFunctionInvokeArgCountExact, callerContext, arguments.Count, 1);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckConditionError);
                }
                var arg0 = default(IEnumerable);
                int argMask = 0;

                int argOrderedIndex = 0;
                for (int i = 0; i < arguments.Count; i++)
                {
                    int argIndex = 0;
                    var arg = arguments[i];
                    var namedArg = arg as ScriptNamedArgument;
                    if (namedArg != null)
                    {
                        Type argType;
                        arg = GetNamedArgument(context, callerContext, namedArg, out argIndex, out argType);
                        argIndex -= 0;
                    }
                    else
                    {
                        argIndex = argOrderedIndex;
                        argOrderedIndex++;
                    }


                    switch (argIndex)
                    {

                        case 0:
                            arg0 = (IEnumerable)context.ToObject(callerContext.Span, arg, typeof(IEnumerable));
                            argMask |= (1 << 0);
                            break;


                    }

                }

                if (argMask != (1 << 1) - 1)
                {
                    string argCheckMaskError = string.Format(RS.BadFunctionInvokeArgCountExact, callerContext, arguments.Count, 1);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckMaskError);
                }

                return _delegate(arg0);
            }
        }

        /// <summary>
        /// Optimized custom function for: ScriptArray (IEnumerable, int)
        /// </summary>
        private class Function_ScriptArray_IEnumerable_int : DynamicCustomFunction
        {
            private delegate ScriptArray InternalDelegate(IEnumerable arg0, int arg1);

            private readonly InternalDelegate _delegate;

            public Function_ScriptArray_IEnumerable_int(MethodInfo method)
                : base(method)
            {
                _delegate = (InternalDelegate)method.CreateDelegate(typeof(InternalDelegate));
            }

            public override object Invoke(TemplateContext context, ScriptNode callerContext, ScriptArray arguments, ScriptBlockStatement blockStatement)
            {
                if (arguments.Count != 2)
                {
                    string argCheckConditionError = string.Format(RS.BadFunctionInvokeArgCountExact, callerContext, arguments.Count, 2);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckConditionError);
                }
                var arg0 = default(IEnumerable);
                var arg1 = default(int);
                int argMask = 0;

                int argOrderedIndex = 0;
                for (int i = 0; i < arguments.Count; i++)
                {
                    int argIndex = 0;
                    var arg = arguments[i];
                    var namedArg = arg as ScriptNamedArgument;
                    if (namedArg != null)
                    {
                        Type argType;
                        arg = GetNamedArgument(context, callerContext, namedArg, out argIndex, out argType);
                        argIndex -= 0;
                    }
                    else
                    {
                        argIndex = argOrderedIndex;
                        argOrderedIndex++;
                    }


                    switch (argIndex)
                    {

                        case 0:
                            arg0 = (IEnumerable)context.ToObject(callerContext.Span, arg, typeof(IEnumerable));
                            argMask |= (1 << 0);
                            break;
                        case 1:
                            arg1 = context.ToInt(callerContext.Span, arg);
                            argMask |= (1 << 1);
                            break;


                    }

                }

                if (argMask != (1 << 2) - 1)
                {
                    string argCheckMaskError = string.Format(RS.BadFunctionInvokeArgCountExact, callerContext, arguments.Count, 2);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckMaskError);
                }

                return _delegate(arg0, arg1);
            }
        }

        /// <summary>
        /// Optimized custom function for: ScriptArray (TemplateContext, string, string, string = ...)
        /// </summary>
        private class Function_ScriptArray_TemplateContext_string_string_string___Opt : DynamicCustomFunction
        {
            private delegate ScriptArray InternalDelegate(TemplateContext arg0, string arg1, string arg2, string arg3);

            private readonly InternalDelegate _delegate;
            private readonly string defaultArg2;

            public Function_ScriptArray_TemplateContext_string_string_string___Opt(MethodInfo method)
                : base(method)
            {
                _delegate = (InternalDelegate)method.CreateDelegate(typeof(InternalDelegate));
                defaultArg2 = (string)Parameters[3].DefaultValue;
            }

            public override object Invoke(TemplateContext context, ScriptNode callerContext, ScriptArray arguments, ScriptBlockStatement blockStatement)
            {
                if (arguments.Count < 2 || arguments.Count > 3)
                {
                    string argCheckConditionError = string.Format(RS.BadFunctionInvokeArgCountMin, callerContext, arguments.Count, 2);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckConditionError);
                }
                var arg0 = default(string);
                var arg1 = default(string);
                var arg2 = defaultArg2;
                int argMask = 4;

                int argOrderedIndex = 0;
                for (int i = 0; i < arguments.Count; i++)
                {
                    int argIndex = 0;
                    var arg = arguments[i];
                    var namedArg = arg as ScriptNamedArgument;
                    if (namedArg != null)
                    {
                        Type argType;
                        arg = GetNamedArgument(context, callerContext, namedArg, out argIndex, out argType);
                        argIndex -= 1;
                    }
                    else
                    {
                        argIndex = argOrderedIndex;
                        argOrderedIndex++;
                    }


                    switch (argIndex)
                    {

                        case 0:
                            arg0 = context.ToString(callerContext.Span, arg);
                            argMask |= (1 << 0);
                            break;
                        case 1:
                            arg1 = context.ToString(callerContext.Span, arg);
                            argMask |= (1 << 1);
                            break;
                        case 2:
                            arg2 = context.ToString(callerContext.Span, arg);
                            break;


                    }

                }

                if (argMask != (1 << 3) - 1)
                {
                    string argCheckMaskError = string.Format(RS.BadFunctionInvokeArgCountMin, callerContext, arguments.Count, 2);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckMaskError);
                }

                return _delegate(context, arg0, arg1, arg2);
            }
        }

        /// <summary>
        /// Optimized custom function for: ScriptObject (TemplateContext, SourceSpan, string)
        /// </summary>
        private class Function_ScriptObject_TemplateContext_SourceSpan_string : DynamicCustomFunction
        {
            private delegate ScriptObject InternalDelegate(TemplateContext arg0, SourceSpan arg1, string arg2);

            private readonly InternalDelegate _delegate;

            public Function_ScriptObject_TemplateContext_SourceSpan_string(MethodInfo method)
                : base(method)
            {
                _delegate = (InternalDelegate)method.CreateDelegate(typeof(InternalDelegate));
            }

            public override object Invoke(TemplateContext context, ScriptNode callerContext, ScriptArray arguments, ScriptBlockStatement blockStatement)
            {
                if (arguments.Count != 1)
                {
                    string argCheckConditionError = string.Format(RS.BadFunctionInvokeArgCountExact, callerContext, arguments.Count, 1);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckConditionError);
                }
                var arg0 = default(string);
                int argMask = 0;

                int argOrderedIndex = 0;
                for (int i = 0; i < arguments.Count; i++)
                {
                    int argIndex = 0;
                    var arg = arguments[i];
                    var namedArg = arg as ScriptNamedArgument;
                    if (namedArg != null)
                    {
                        Type argType;
                        arg = GetNamedArgument(context, callerContext, namedArg, out argIndex, out argType);
                        argIndex -= 2;
                    }
                    else
                    {
                        argIndex = argOrderedIndex;
                        argOrderedIndex++;
                    }


                    switch (argIndex)
                    {

                        case 0:
                            arg0 = context.ToString(callerContext.Span, arg);
                            argMask |= (1 << 0);
                            break;


                    }

                }

                if (argMask != (1 << 1) - 1)
                {
                    string argCheckMaskError = string.Format(RS.BadFunctionInvokeArgCountExact, callerContext, arguments.Count, 1);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckMaskError);
                }

                return _delegate(context, callerContext.Span, arg0);
            }
        }

        /// <summary>
        /// Optimized custom function for: string (bool, string, string)
        /// </summary>
        private class Function_string_bool_string_string : DynamicCustomFunction
        {
            private delegate string InternalDelegate(bool arg0, string arg1, string arg2);

            private readonly InternalDelegate _delegate;

            public Function_string_bool_string_string(MethodInfo method)
                : base(method)
            {
                _delegate = (InternalDelegate)method.CreateDelegate(typeof(InternalDelegate));
            }

            public override object Invoke(TemplateContext context, ScriptNode callerContext, ScriptArray arguments, ScriptBlockStatement blockStatement)
            {
                if (arguments.Count != 3)
                {
                    string argCheckConditionError = string.Format(RS.BadFunctionInvokeArgCountExact, callerContext, arguments.Count, 3);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckConditionError);
                }
                var arg0 = default(bool);
                var arg1 = default(string);
                var arg2 = default(string);
                int argMask = 0;

                int argOrderedIndex = 0;
                for (int i = 0; i < arguments.Count; i++)
                {
                    int argIndex = 0;
                    var arg = arguments[i];
                    var namedArg = arg as ScriptNamedArgument;
                    if (namedArg != null)
                    {
                        Type argType;
                        arg = GetNamedArgument(context, callerContext, namedArg, out argIndex, out argType);
                        argIndex -= 0;
                    }
                    else
                    {
                        argIndex = argOrderedIndex;
                        argOrderedIndex++;
                    }


                    switch (argIndex)
                    {

                        case 0:
                            arg0 = (bool)context.ToObject(callerContext.Span, arg, typeof(bool));
                            argMask |= (1 << 0);
                            break;
                        case 1:
                            arg1 = context.ToString(callerContext.Span, arg);
                            argMask |= (1 << 1);
                            break;
                        case 2:
                            arg2 = context.ToString(callerContext.Span, arg);
                            argMask |= (1 << 2);
                            break;


                    }

                }

                if (argMask != (1 << 3) - 1)
                {
                    string argCheckMaskError = string.Format(RS.BadFunctionInvokeArgCountExact, callerContext, arguments.Count, 3);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckMaskError);
                }

                return _delegate(arg0, arg1, arg2);
            }
        }

        /// <summary>
        /// Optimized custom function for: string (IEnumerable, string, string = ...)
        /// </summary>
        private class Function_string_IEnumerable_string_string___Opt : DynamicCustomFunction
        {
            private delegate string InternalDelegate(IEnumerable arg0, string arg1, string arg2);

            private readonly InternalDelegate _delegate;
            private readonly string defaultArg2;

            public Function_string_IEnumerable_string_string___Opt(MethodInfo method)
                : base(method)
            {
                _delegate = (InternalDelegate)method.CreateDelegate(typeof(InternalDelegate));
                defaultArg2 = (string)Parameters[2].DefaultValue;
            }

            public override object Invoke(TemplateContext context, ScriptNode callerContext, ScriptArray arguments, ScriptBlockStatement blockStatement)
            {
                if (arguments.Count < 2 || arguments.Count > 3)
                {
                    string argCheckConditionError = string.Format(RS.BadFunctionInvokeArgCountMin, callerContext, arguments.Count, 2);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckConditionError);
                }
                var arg0 = default(IEnumerable);
                var arg1 = default(string);
                var arg2 = defaultArg2;
                int argMask = 4;

                int argOrderedIndex = 0;
                for (int i = 0; i < arguments.Count; i++)
                {
                    int argIndex = 0;
                    var arg = arguments[i];
                    var namedArg = arg as ScriptNamedArgument;
                    if (namedArg != null)
                    {
                        Type argType;
                        arg = GetNamedArgument(context, callerContext, namedArg, out argIndex, out argType);
                        argIndex -= 0;
                    }
                    else
                    {
                        argIndex = argOrderedIndex;
                        argOrderedIndex++;
                    }


                    switch (argIndex)
                    {

                        case 0:
                            arg0 = (IEnumerable)context.ToObject(callerContext.Span, arg, typeof(IEnumerable));
                            argMask |= (1 << 0);
                            break;
                        case 1:
                            arg1 = context.ToString(callerContext.Span, arg);
                            argMask |= (1 << 1);
                            break;
                        case 2:
                            arg2 = context.ToString(callerContext.Span, arg);
                            break;


                    }

                }

                if (argMask != (1 << 3) - 1)
                {
                    string argCheckMaskError = string.Format(RS.BadFunctionInvokeArgCountMin, callerContext, arguments.Count, 2);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckMaskError);
                }

                return _delegate(arg0, arg1, arg2);
            }
        }

        /// <summary>
        /// Optimized custom function for: string (int, string, string)
        /// </summary>
        private class Function_string_int_string_string : DynamicCustomFunction
        {
            private delegate string InternalDelegate(int arg0, string arg1, string arg2);

            private readonly InternalDelegate _delegate;

            public Function_string_int_string_string(MethodInfo method)
                : base(method)
            {
                _delegate = (InternalDelegate)method.CreateDelegate(typeof(InternalDelegate));
            }

            public override object Invoke(TemplateContext context, ScriptNode callerContext, ScriptArray arguments, ScriptBlockStatement blockStatement)
            {
                if (arguments.Count != 3)
                {
                    string argCheckConditionError = string.Format(RS.BadFunctionInvokeArgCountExact, callerContext, arguments.Count, 3);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckConditionError);
                }
                var arg0 = default(int);
                var arg1 = default(string);
                var arg2 = default(string);
                int argMask = 0;

                int argOrderedIndex = 0;
                for (int i = 0; i < arguments.Count; i++)
                {
                    int argIndex = 0;
                    var arg = arguments[i];
                    var namedArg = arg as ScriptNamedArgument;
                    if (namedArg != null)
                    {
                        Type argType;
                        arg = GetNamedArgument(context, callerContext, namedArg, out argIndex, out argType);
                        argIndex -= 0;
                    }
                    else
                    {
                        argIndex = argOrderedIndex;
                        argOrderedIndex++;
                    }


                    switch (argIndex)
                    {

                        case 0:
                            arg0 = context.ToInt(callerContext.Span, arg);
                            argMask |= (1 << 0);
                            break;
                        case 1:
                            arg1 = context.ToString(callerContext.Span, arg);
                            argMask |= (1 << 1);
                            break;
                        case 2:
                            arg2 = context.ToString(callerContext.Span, arg);
                            argMask |= (1 << 2);
                            break;


                    }

                }

                if (argMask != (1 << 3) - 1)
                {
                    string argCheckMaskError = string.Format(RS.BadFunctionInvokeArgCountExact, callerContext, arguments.Count, 3);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckMaskError);
                }

                return _delegate(arg0, arg1, arg2);
            }
        }

        /// <summary>
        /// Optimized custom function for: string (object)
        /// </summary>
        private class Function_string_object : DynamicCustomFunction
        {
            private delegate string InternalDelegate(object arg0);

            private readonly InternalDelegate _delegate;

            public Function_string_object(MethodInfo method)
                : base(method)
            {
                _delegate = (InternalDelegate)method.CreateDelegate(typeof(InternalDelegate));
            }

            public override object Invoke(TemplateContext context, ScriptNode callerContext, ScriptArray arguments, ScriptBlockStatement blockStatement)
            {
                if (arguments.Count != 1)
                {
                    string argCheckConditionError = string.Format(RS.BadFunctionInvokeArgCountExact, callerContext, arguments.Count, 1);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckConditionError);
                }
                var arg0 = default(object);
                int argMask = 0;

                int argOrderedIndex = 0;
                for (int i = 0; i < arguments.Count; i++)
                {
                    int argIndex = 0;
                    var arg = arguments[i];
                    var namedArg = arg as ScriptNamedArgument;
                    if (namedArg != null)
                    {
                        Type argType;
                        arg = GetNamedArgument(context, callerContext, namedArg, out argIndex, out argType);
                        argIndex -= 0;
                    }
                    else
                    {
                        argIndex = argOrderedIndex;
                        argOrderedIndex++;
                    }


                    switch (argIndex)
                    {

                        case 0:
                            arg0 = arg;
                            argMask |= (1 << 0);
                            break;


                    }

                }

                if (argMask != (1 << 1) - 1)
                {
                    string argCheckMaskError = string.Format(RS.BadFunctionInvokeArgCountExact, callerContext, arguments.Count, 1);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckMaskError);
                }

                return _delegate(arg0);
            }
        }

        /// <summary>
        /// Optimized custom function for: string (string)
        /// </summary>
        private class Function_string_string : DynamicCustomFunction
        {
            private delegate string InternalDelegate(string arg0);

            private readonly InternalDelegate _delegate;

            public Function_string_string(MethodInfo method)
                : base(method)
            {
                _delegate = (InternalDelegate)method.CreateDelegate(typeof(InternalDelegate));
            }

            public override object Invoke(TemplateContext context, ScriptNode callerContext, ScriptArray arguments, ScriptBlockStatement blockStatement)
            {
                if (arguments.Count != 1)
                {
                    string argCheckConditionError = string.Format(RS.BadFunctionInvokeArgCountExact, callerContext, arguments.Count, 1);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckConditionError);
                }
                var arg0 = default(string);
                int argMask = 0;

                int argOrderedIndex = 0;
                for (int i = 0; i < arguments.Count; i++)
                {
                    int argIndex = 0;
                    var arg = arguments[i];
                    var namedArg = arg as ScriptNamedArgument;
                    if (namedArg != null)
                    {
                        Type argType;
                        arg = GetNamedArgument(context, callerContext, namedArg, out argIndex, out argType);
                        argIndex -= 0;
                    }
                    else
                    {
                        argIndex = argOrderedIndex;
                        argOrderedIndex++;
                    }


                    switch (argIndex)
                    {

                        case 0:
                            arg0 = context.ToString(callerContext.Span, arg);
                            argMask |= (1 << 0);
                            break;


                    }

                }

                if (argMask != (1 << 1) - 1)
                {
                    string argCheckMaskError = string.Format(RS.BadFunctionInvokeArgCountExact, callerContext, arguments.Count, 1);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckMaskError);
                }

                return _delegate(arg0);
            }
        }

        /// <summary>
        /// Optimized custom function for: string (string, int, Char = ...)
        /// </summary>
        private class Function_string_string_int_Char___Opt : DynamicCustomFunction
        {
            private delegate string InternalDelegate(string arg0, int arg1, Char arg2);

            private readonly InternalDelegate _delegate;
            private readonly Char defaultArg2;

            public Function_string_string_int_Char___Opt(MethodInfo method)
                : base(method)
            {
                _delegate = (InternalDelegate)method.CreateDelegate(typeof(InternalDelegate));
                defaultArg2 = (Char)Parameters[2].DefaultValue;
            }

            public override object Invoke(TemplateContext context, ScriptNode callerContext, ScriptArray arguments, ScriptBlockStatement blockStatement)
            {
                if (arguments.Count < 2 || arguments.Count > 3)
                {
                    string argCheckConditionError = string.Format(RS.BadFunctionInvokeArgCountMin, callerContext, arguments.Count, 2);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckConditionError);
                }
                var arg0 = default(string);
                var arg1 = default(int);
                var arg2 = defaultArg2;
                int argMask = 4;

                int argOrderedIndex = 0;
                for (int i = 0; i < arguments.Count; i++)
                {
                    int argIndex = 0;
                    var arg = arguments[i];
                    var namedArg = arg as ScriptNamedArgument;
                    if (namedArg != null)
                    {
                        Type argType;
                        arg = GetNamedArgument(context, callerContext, namedArg, out argIndex, out argType);
                        argIndex -= 0;
                    }
                    else
                    {
                        argIndex = argOrderedIndex;
                        argOrderedIndex++;
                    }


                    switch (argIndex)
                    {

                        case 0:
                            arg0 = context.ToString(callerContext.Span, arg);
                            argMask |= (1 << 0);
                            break;
                        case 1:
                            arg1 = context.ToInt(callerContext.Span, arg);
                            argMask |= (1 << 1);
                            break;
                        case 2:
                            arg2 = (Char)context.ToObject(callerContext.Span, arg, typeof(Char));
                            break;


                    }

                }

                if (argMask != (1 << 3) - 1)
                {
                    string argCheckMaskError = string.Format(RS.BadFunctionInvokeArgCountMin, callerContext, arguments.Count, 2);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckMaskError);
                }

                return _delegate(arg0, arg1, arg2);
            }
        }

        /// <summary>
        /// Optimized custom function for: string (string, int, int = ...)
        /// </summary>
        private class Function_string_string_int_int___Opt : DynamicCustomFunction
        {
            private delegate string InternalDelegate(string arg0, int arg1, int arg2);

            private readonly InternalDelegate _delegate;
            private readonly int defaultArg2;

            public Function_string_string_int_int___Opt(MethodInfo method)
                : base(method)
            {
                _delegate = (InternalDelegate)method.CreateDelegate(typeof(InternalDelegate));
                defaultArg2 = (int)Parameters[2].DefaultValue;
            }

            public override object Invoke(TemplateContext context, ScriptNode callerContext, ScriptArray arguments, ScriptBlockStatement blockStatement)
            {
                if (arguments.Count < 2 || arguments.Count > 3)
                {
                    string argCheckConditionError = string.Format(RS.BadFunctionInvokeArgCountMin, callerContext, arguments.Count, 2);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckConditionError);
                }
                var arg0 = default(string);
                var arg1 = default(int);
                var arg2 = defaultArg2;
                int argMask = 4;

                int argOrderedIndex = 0;
                for (int i = 0; i < arguments.Count; i++)
                {
                    int argIndex = 0;
                    var arg = arguments[i];
                    var namedArg = arg as ScriptNamedArgument;
                    if (namedArg != null)
                    {
                        Type argType;
                        arg = GetNamedArgument(context, callerContext, namedArg, out argIndex, out argType);
                        argIndex -= 0;
                    }
                    else
                    {
                        argIndex = argOrderedIndex;
                        argOrderedIndex++;
                    }


                    switch (argIndex)
                    {

                        case 0:
                            arg0 = context.ToString(callerContext.Span, arg);
                            argMask |= (1 << 0);
                            break;
                        case 1:
                            arg1 = context.ToInt(callerContext.Span, arg);
                            argMask |= (1 << 1);
                            break;
                        case 2:
                            arg2 = context.ToInt(callerContext.Span, arg);
                            break;


                    }

                }

                if (argMask != (1 << 3) - 1)
                {
                    string argCheckMaskError = string.Format(RS.BadFunctionInvokeArgCountMin, callerContext, arguments.Count, 2);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckMaskError);
                }

                return _delegate(arg0, arg1, arg2);
            }
        }

        /// <summary>
        /// Optimized custom function for: string (string, int, string = ...)
        /// </summary>
        private class Function_string_string_int_string___Opt : DynamicCustomFunction
        {
            private delegate string InternalDelegate(string arg0, int arg1, string arg2);

            private readonly InternalDelegate _delegate;
            private readonly string defaultArg2;

            public Function_string_string_int_string___Opt(MethodInfo method)
                : base(method)
            {
                _delegate = (InternalDelegate)method.CreateDelegate(typeof(InternalDelegate));
                defaultArg2 = (string)Parameters[2].DefaultValue;
            }

            public override object Invoke(TemplateContext context, ScriptNode callerContext, ScriptArray arguments, ScriptBlockStatement blockStatement)
            {
                if (arguments.Count < 2 || arguments.Count > 3)
                {
                    string argCheckConditionError = string.Format(RS.BadFunctionInvokeArgCountMin, callerContext, arguments.Count, 2);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckConditionError);
                }
                var arg0 = default(string);
                var arg1 = default(int);
                var arg2 = defaultArg2;
                int argMask = 4;

                int argOrderedIndex = 0;
                for (int i = 0; i < arguments.Count; i++)
                {
                    int argIndex = 0;
                    var arg = arguments[i];
                    var namedArg = arg as ScriptNamedArgument;
                    if (namedArg != null)
                    {
                        Type argType;
                        arg = GetNamedArgument(context, callerContext, namedArg, out argIndex, out argType);
                        argIndex -= 0;
                    }
                    else
                    {
                        argIndex = argOrderedIndex;
                        argOrderedIndex++;
                    }


                    switch (argIndex)
                    {

                        case 0:
                            arg0 = context.ToString(callerContext.Span, arg);
                            argMask |= (1 << 0);
                            break;
                        case 1:
                            arg1 = context.ToInt(callerContext.Span, arg);
                            argMask |= (1 << 1);
                            break;
                        case 2:
                            arg2 = context.ToString(callerContext.Span, arg);
                            break;


                    }

                }

                if (argMask != (1 << 3) - 1)
                {
                    string argCheckMaskError = string.Format(RS.BadFunctionInvokeArgCountMin, callerContext, arguments.Count, 2);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckMaskError);
                }

                return _delegate(arg0, arg1, arg2);
            }
        }

        /// <summary>
        /// Optimized custom function for: string (string, string)
        /// </summary>
        private class Function_string_string_string : DynamicCustomFunction
        {
            private delegate string InternalDelegate(string arg0, string arg1);

            private readonly InternalDelegate _delegate;

            public Function_string_string_string(MethodInfo method)
                : base(method)
            {
                _delegate = (InternalDelegate)method.CreateDelegate(typeof(InternalDelegate));
            }

            public override object Invoke(TemplateContext context, ScriptNode callerContext, ScriptArray arguments, ScriptBlockStatement blockStatement)
            {
                if (arguments.Count != 2)
                {
                    string argCheckConditionError = string.Format(RS.BadFunctionInvokeArgCountExact, callerContext, arguments.Count, 2);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckConditionError);
                }
                var arg0 = default(string);
                var arg1 = default(string);
                int argMask = 0;

                int argOrderedIndex = 0;
                for (int i = 0; i < arguments.Count; i++)
                {
                    int argIndex = 0;
                    var arg = arguments[i];
                    var namedArg = arg as ScriptNamedArgument;
                    if (namedArg != null)
                    {
                        Type argType;
                        arg = GetNamedArgument(context, callerContext, namedArg, out argIndex, out argType);
                        argIndex -= 0;
                    }
                    else
                    {
                        argIndex = argOrderedIndex;
                        argOrderedIndex++;
                    }


                    switch (argIndex)
                    {

                        case 0:
                            arg0 = context.ToString(callerContext.Span, arg);
                            argMask |= (1 << 0);
                            break;
                        case 1:
                            arg1 = context.ToString(callerContext.Span, arg);
                            argMask |= (1 << 1);
                            break;


                    }

                }

                if (argMask != (1 << 2) - 1)
                {
                    string argCheckMaskError = string.Format(RS.BadFunctionInvokeArgCountExact, callerContext, arguments.Count, 2);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckMaskError);
                }

                return _delegate(arg0, arg1);
            }
        }

        /// <summary>
        /// Optimized custom function for: string (string, string, string = ...)
        /// </summary>
        private class Function_string_string_string_string___Opt : DynamicCustomFunction
        {
            private delegate string InternalDelegate(string arg0, string arg1, string arg2);

            private readonly InternalDelegate _delegate;
            private readonly string defaultArg2;

            public Function_string_string_string_string___Opt(MethodInfo method)
                : base(method)
            {
                _delegate = (InternalDelegate)method.CreateDelegate(typeof(InternalDelegate));
                defaultArg2 = (string)Parameters[2].DefaultValue;
            }

            public override object Invoke(TemplateContext context, ScriptNode callerContext, ScriptArray arguments, ScriptBlockStatement blockStatement)
            {
                if (arguments.Count < 2 || arguments.Count > 3)
                {
                    string argCheckConditionError = string.Format(RS.BadFunctionInvokeArgCountMin, callerContext, arguments.Count, 2);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckConditionError);
                }
                var arg0 = default(string);
                var arg1 = default(string);
                var arg2 = defaultArg2;
                int argMask = 4;

                int argOrderedIndex = 0;
                for (int i = 0; i < arguments.Count; i++)
                {
                    int argIndex = 0;
                    var arg = arguments[i];
                    var namedArg = arg as ScriptNamedArgument;
                    if (namedArg != null)
                    {
                        Type argType;
                        arg = GetNamedArgument(context, callerContext, namedArg, out argIndex, out argType);
                        argIndex -= 0;
                    }
                    else
                    {
                        argIndex = argOrderedIndex;
                        argOrderedIndex++;
                    }


                    switch (argIndex)
                    {

                        case 0:
                            arg0 = context.ToString(callerContext.Span, arg);
                            argMask |= (1 << 0);
                            break;
                        case 1:
                            arg1 = context.ToString(callerContext.Span, arg);
                            argMask |= (1 << 1);
                            break;
                        case 2:
                            arg2 = context.ToString(callerContext.Span, arg);
                            break;


                    }

                }

                if (argMask != (1 << 3) - 1)
                {
                    string argCheckMaskError = string.Format(RS.BadFunctionInvokeArgCountMin, callerContext, arguments.Count, 2);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckMaskError);
                }

                return _delegate(arg0, arg1, arg2);
            }
        }

        /// <summary>
        /// Optimized custom function for: string (string, string, string)
        /// </summary>
        private class Function_string_string_string_string : DynamicCustomFunction
        {
            private delegate string InternalDelegate(string arg0, string arg1, string arg2);

            private readonly InternalDelegate _delegate;

            public Function_string_string_string_string(MethodInfo method)
                : base(method)
            {
                _delegate = (InternalDelegate)method.CreateDelegate(typeof(InternalDelegate));
            }

            public override object Invoke(TemplateContext context, ScriptNode callerContext, ScriptArray arguments, ScriptBlockStatement blockStatement)
            {
                if (arguments.Count != 3)
                {
                    string argCheckConditionError = string.Format(RS.BadFunctionInvokeArgCountExact, callerContext, arguments.Count, 3);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckConditionError);
                }
                var arg0 = default(string);
                var arg1 = default(string);
                var arg2 = default(string);
                int argMask = 0;

                int argOrderedIndex = 0;
                for (int i = 0; i < arguments.Count; i++)
                {
                    int argIndex = 0;
                    var arg = arguments[i];
                    var namedArg = arg as ScriptNamedArgument;
                    if (namedArg != null)
                    {
                        Type argType;
                        arg = GetNamedArgument(context, callerContext, namedArg, out argIndex, out argType);
                        argIndex -= 0;
                    }
                    else
                    {
                        argIndex = argOrderedIndex;
                        argOrderedIndex++;
                    }


                    switch (argIndex)
                    {

                        case 0:
                            arg0 = context.ToString(callerContext.Span, arg);
                            argMask |= (1 << 0);
                            break;
                        case 1:
                            arg1 = context.ToString(callerContext.Span, arg);
                            argMask |= (1 << 1);
                            break;
                        case 2:
                            arg2 = context.ToString(callerContext.Span, arg);
                            argMask |= (1 << 2);
                            break;


                    }

                }

                if (argMask != (1 << 3) - 1)
                {
                    string argCheckMaskError = string.Format(RS.BadFunctionInvokeArgCountExact, callerContext, arguments.Count, 3);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckMaskError);
                }

                return _delegate(arg0, arg1, arg2);
            }
        }

        /// <summary>
        /// Optimized custom function for: string (TemplateContext, SourceSpan, IEnumerable, string, string = ...)
        /// </summary>
        private class Function_string_TemplateContext_SourceSpan_IEnumerable_string_string___Opt : DynamicCustomFunction
        {
            private delegate string InternalDelegate(TemplateContext arg0, SourceSpan arg1, IEnumerable arg2, string arg3, string arg4);

            private readonly InternalDelegate _delegate;
            private readonly string defaultArg2;

            public Function_string_TemplateContext_SourceSpan_IEnumerable_string_string___Opt(MethodInfo method)
                : base(method)
            {
                _delegate = (InternalDelegate)method.CreateDelegate(typeof(InternalDelegate));
                defaultArg2 = (string)Parameters[4].DefaultValue;
            }

            public override object Invoke(TemplateContext context, ScriptNode callerContext, ScriptArray arguments, ScriptBlockStatement blockStatement)
            {
                if (arguments.Count < 2 || arguments.Count > 3)
                {
                    string argCheckConditionError = string.Format(RS.BadFunctionInvokeArgCountMin, callerContext, arguments.Count, 2);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckConditionError);
                }
                var arg0 = default(IEnumerable);
                var arg1 = default(string);
                var arg2 = defaultArg2;
                int argMask = 4;

                int argOrderedIndex = 0;
                for (int i = 0; i < arguments.Count; i++)
                {
                    int argIndex = 0;
                    var arg = arguments[i];
                    var namedArg = arg as ScriptNamedArgument;
                    if (namedArg != null)
                    {
                        Type argType;
                        arg = GetNamedArgument(context, callerContext, namedArg, out argIndex, out argType);
                        argIndex -= 2;
                    }
                    else
                    {
                        argIndex = argOrderedIndex;
                        argOrderedIndex++;
                    }


                    switch (argIndex)
                    {

                        case 0:
                            arg0 = (IEnumerable)context.ToObject(callerContext.Span, arg, typeof(IEnumerable));
                            argMask |= (1 << 0);
                            break;
                        case 1:
                            arg1 = context.ToString(callerContext.Span, arg);
                            argMask |= (1 << 1);
                            break;
                        case 2:
                            arg2 = context.ToString(callerContext.Span, arg);
                            break;


                    }

                }

                if (argMask != (1 << 3) - 1)
                {
                    string argCheckMaskError = string.Format(RS.BadFunctionInvokeArgCountMin, callerContext, arguments.Count, 2);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckMaskError);
                }

                return _delegate(context, callerContext.Span, arg0, arg1, arg2);
            }
        }

        /// <summary>
        /// Optimized custom function for: string (TemplateContext, SourceSpan, object, string, string = ...)
        /// </summary>
        private class Function_string_TemplateContext_SourceSpan_object_string_string___Opt : DynamicCustomFunction
        {
            private delegate string InternalDelegate(TemplateContext arg0, SourceSpan arg1, object arg2, string arg3, string arg4);

            private readonly InternalDelegate _delegate;
            private readonly string defaultArg2;

            public Function_string_TemplateContext_SourceSpan_object_string_string___Opt(MethodInfo method)
                : base(method)
            {
                _delegate = (InternalDelegate)method.CreateDelegate(typeof(InternalDelegate));
                defaultArg2 = (string)Parameters[4].DefaultValue;
            }

            public override object Invoke(TemplateContext context, ScriptNode callerContext, ScriptArray arguments, ScriptBlockStatement blockStatement)
            {
                if (arguments.Count < 2 || arguments.Count > 3)
                {
                    string argCheckConditionError = string.Format(RS.BadFunctionInvokeArgCountMin, callerContext, arguments.Count, 2);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckConditionError);
                }
                var arg0 = default(object);
                var arg1 = default(string);
                var arg2 = defaultArg2;
                int argMask = 4;

                int argOrderedIndex = 0;
                for (int i = 0; i < arguments.Count; i++)
                {
                    int argIndex = 0;
                    var arg = arguments[i];
                    var namedArg = arg as ScriptNamedArgument;
                    if (namedArg != null)
                    {
                        Type argType;
                        arg = GetNamedArgument(context, callerContext, namedArg, out argIndex, out argType);
                        argIndex -= 2;
                    }
                    else
                    {
                        argIndex = argOrderedIndex;
                        argOrderedIndex++;
                    }


                    switch (argIndex)
                    {

                        case 0:
                            arg0 = arg;
                            argMask |= (1 << 0);
                            break;
                        case 1:
                            arg1 = context.ToString(callerContext.Span, arg);
                            argMask |= (1 << 1);
                            break;
                        case 2:
                            arg2 = context.ToString(callerContext.Span, arg);
                            break;


                    }

                }

                if (argMask != (1 << 3) - 1)
                {
                    string argCheckMaskError = string.Format(RS.BadFunctionInvokeArgCountMin, callerContext, arguments.Count, 2);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckMaskError);
                }

                return _delegate(context, callerContext.Span, arg0, arg1, arg2);
            }
        }

        /// <summary>
        /// Optimized custom function for: string (TemplateContext, string)
        /// </summary>
        private class Function_string_TemplateContext_string : DynamicCustomFunction
        {
            private delegate string InternalDelegate(TemplateContext arg0, string arg1);

            private readonly InternalDelegate _delegate;

            public Function_string_TemplateContext_string(MethodInfo method)
                : base(method)
            {
                _delegate = (InternalDelegate)method.CreateDelegate(typeof(InternalDelegate));
            }

            public override object Invoke(TemplateContext context, ScriptNode callerContext, ScriptArray arguments, ScriptBlockStatement blockStatement)
            {
                if (arguments.Count != 1)
                {
                    string argCheckConditionError = string.Format(RS.BadFunctionInvokeArgCountExact, callerContext, arguments.Count, 1);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckConditionError);
                }
                var arg0 = default(string);
                int argMask = 0;

                int argOrderedIndex = 0;
                for (int i = 0; i < arguments.Count; i++)
                {
                    int argIndex = 0;
                    var arg = arguments[i];
                    var namedArg = arg as ScriptNamedArgument;
                    if (namedArg != null)
                    {
                        Type argType;
                        arg = GetNamedArgument(context, callerContext, namedArg, out argIndex, out argType);
                        argIndex -= 1;
                    }
                    else
                    {
                        argIndex = argOrderedIndex;
                        argOrderedIndex++;
                    }


                    switch (argIndex)
                    {

                        case 0:
                            arg0 = context.ToString(callerContext.Span, arg);
                            argMask |= (1 << 0);
                            break;


                    }

                }

                if (argMask != (1 << 1) - 1)
                {
                    string argCheckMaskError = string.Format(RS.BadFunctionInvokeArgCountExact, callerContext, arguments.Count, 1);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckMaskError);
                }

                return _delegate(context, arg0);
            }
        }

        /// <summary>
        /// Optimized custom function for: string (TemplateContext, string, string, string, string = ...)
        /// </summary>
        private class Function_string_TemplateContext_string_string_string_string___Opt : DynamicCustomFunction
        {
            private delegate string InternalDelegate(TemplateContext arg0, string arg1, string arg2, string arg3, string arg4);

            private readonly InternalDelegate _delegate;
            private readonly string defaultArg3;

            public Function_string_TemplateContext_string_string_string_string___Opt(MethodInfo method)
                : base(method)
            {
                _delegate = (InternalDelegate)method.CreateDelegate(typeof(InternalDelegate));
                defaultArg3 = (string)Parameters[4].DefaultValue;
            }

            public override object Invoke(TemplateContext context, ScriptNode callerContext, ScriptArray arguments, ScriptBlockStatement blockStatement)
            {
                if (arguments.Count < 3 || arguments.Count > 4)
                {
                    string argCheckConditionError = string.Format(RS.BadFunctionInvokeArgCountMin, callerContext, arguments.Count, 3);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckConditionError);
                }
                var arg0 = default(string);
                var arg1 = default(string);
                var arg2 = default(string);
                var arg3 = defaultArg3;
                int argMask = 8;

                int argOrderedIndex = 0;
                for (int i = 0; i < arguments.Count; i++)
                {
                    int argIndex = 0;
                    var arg = arguments[i];
                    var namedArg = arg as ScriptNamedArgument;
                    if (namedArg != null)
                    {
                        Type argType;
                        arg = GetNamedArgument(context, callerContext, namedArg, out argIndex, out argType);
                        argIndex -= 1;
                    }
                    else
                    {
                        argIndex = argOrderedIndex;
                        argOrderedIndex++;
                    }


                    switch (argIndex)
                    {

                        case 0:
                            arg0 = context.ToString(callerContext.Span, arg);
                            argMask |= (1 << 0);
                            break;
                        case 1:
                            arg1 = context.ToString(callerContext.Span, arg);
                            argMask |= (1 << 1);
                            break;
                        case 2:
                            arg2 = context.ToString(callerContext.Span, arg);
                            argMask |= (1 << 2);
                            break;
                        case 3:
                            arg3 = context.ToString(callerContext.Span, arg);
                            break;


                    }

                }

                if (argMask != (1 << 4) - 1)
                {
                    string argCheckMaskError = string.Format(RS.BadFunctionInvokeArgCountMin, callerContext, arguments.Count, 3);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckMaskError);
                }

                return _delegate(context, arg0, arg1, arg2, arg3);
            }
        }

        /// <summary>
        /// Optimized custom function for: TimeSpan (double)
        /// </summary>
        private class Function_TimeSpan_double : DynamicCustomFunction
        {
            private delegate TimeSpan InternalDelegate(double arg0);

            private readonly InternalDelegate _delegate;

            public Function_TimeSpan_double(MethodInfo method)
                : base(method)
            {
                _delegate = (InternalDelegate)method.CreateDelegate(typeof(InternalDelegate));
            }

            public override object Invoke(TemplateContext context, ScriptNode callerContext, ScriptArray arguments, ScriptBlockStatement blockStatement)
            {
                if (arguments.Count != 1)
                {
                    string argCheckConditionError = string.Format(RS.BadFunctionInvokeArgCountExact, callerContext, arguments.Count, 1);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckConditionError);
                }
                var arg0 = default(double);
                int argMask = 0;

                int argOrderedIndex = 0;
                for (int i = 0; i < arguments.Count; i++)
                {
                    int argIndex = 0;
                    var arg = arguments[i];
                    var namedArg = arg as ScriptNamedArgument;
                    if (namedArg != null)
                    {
                        Type argType;
                        arg = GetNamedArgument(context, callerContext, namedArg, out argIndex, out argType);
                        argIndex -= 0;
                    }
                    else
                    {
                        argIndex = argOrderedIndex;
                        argOrderedIndex++;
                    }


                    switch (argIndex)
                    {

                        case 0:
                            arg0 = (double)context.ToObject(callerContext.Span, arg, typeof(double));
                            argMask |= (1 << 0);
                            break;


                    }

                }

                if (argMask != (1 << 1) - 1)
                {
                    string argCheckMaskError = string.Format(RS.BadFunctionInvokeArgCountExact, callerContext, arguments.Count, 1);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckMaskError);
                }

                return _delegate(arg0);
            }
        }

        /// <summary>
        /// Optimized custom function for: TimeSpan (string)
        /// </summary>
        private class Function_TimeSpan_string : DynamicCustomFunction
        {
            private delegate TimeSpan InternalDelegate(string arg0);

            private readonly InternalDelegate _delegate;

            public Function_TimeSpan_string(MethodInfo method)
                : base(method)
            {
                _delegate = (InternalDelegate)method.CreateDelegate(typeof(InternalDelegate));
            }

            public override object Invoke(TemplateContext context, ScriptNode callerContext, ScriptArray arguments, ScriptBlockStatement blockStatement)
            {
                if (arguments.Count != 1)
                {
                    string argCheckConditionError = string.Format(RS.BadFunctionInvokeArgCountExact, callerContext, arguments.Count, 1);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckConditionError);
                }
                var arg0 = default(string);
                int argMask = 0;

                int argOrderedIndex = 0;
                for (int i = 0; i < arguments.Count; i++)
                {
                    int argIndex = 0;
                    var arg = arguments[i];
                    var namedArg = arg as ScriptNamedArgument;
                    if (namedArg != null)
                    {
                        Type argType;
                        arg = GetNamedArgument(context, callerContext, namedArg, out argIndex, out argType);
                        argIndex -= 0;
                    }
                    else
                    {
                        argIndex = argOrderedIndex;
                        argOrderedIndex++;
                    }


                    switch (argIndex)
                    {

                        case 0:
                            arg0 = context.ToString(callerContext.Span, arg);
                            argMask |= (1 << 0);
                            break;


                    }

                }

                if (argMask != (1 << 1) - 1)
                {
                    string argCheckMaskError = string.Format(RS.BadFunctionInvokeArgCountExact, callerContext, arguments.Count, 1);
                    throw new ScriptRuntimeException(callerContext.Span, argCheckMaskError);
                }

                return _delegate(arg0);
            }
        }

    }
}
