ExpectPositiveInteger = Expects an integer value that is greater than zero.
StackEmptyError = An internal error has occured. The stack is empty.
BadFunctionInvokeArgCountRange = Unable to create an object or call function "{0}" because {1} parameter(s) was or were provided. The expected number of parameter(s) is {2} to {3}.
BadFunctionInvokeArgCountExact = Unable to create an object or call function "{0}" because {1} parameter(s) was or were provided. Exactly {2} parameter(s) must be specified.
BadFunctionInvokeArgCountMin = Unable to create an object or call function "{0}" because {1} parameter(s) was or were provided. At least {2} parameter(s) must be specified.
BadFunctionInvokeArgEmpty = Unable to create an object or function "{0}" because no parameter was provided. At least 1 parameter is required.
UnsupportedFunctionOnPlatform = The function "{0}" is not supported on the current platform.
FSPathRequired = The "{0}" function requires a "path" parameter.
FSUnsupportedType = The "{0}" function was given an unsupported value ("{1}") for its "type" parameter. The supported values are: "any", "container", and "leaf". 
NoTemplateLoader = Unable to invoke the "{0}" function because the "TemplateLoader" property is unavailable in the current context.
IncludeNameRequired = The "include" function requires a template name as its first parameter.
IncludePathNullError = The "include" function is unable to resolve the path for template "{0}".
IncludeResolvePathError = The "include" function has encountered an error while attempting to resolve the path for template "{0}".
IncludeLoadError = The "include" function has encountered an error while attempting to load the template "{0}" at path "{1}".
IncludeContentEmpty = An error has occured in an "include" function. The content of the template "{0}" at path "{1}" is empty.
IncludeParseError = An include template "{0}" at path "{1}" contains errors.
NotNumberError = The value "{0}" is not a number.
NotFormatNumberError = The value "{0}" is not a formattable number.
NotFormatObjectError = The object "{0}" is not formattable.
InvalidStringDataLine = Each line in a string data block must contain an equal ('=') character that cannot be the first character, or start with a '#' character to denote a comment line.
NotHexIntChar = The character "{0}" is not a hexadecimal character. Valid hexadecimal characters are 0-9, a-f and A-F.
ParseError = Invalid "{0}" syntax: {1}{2}{3}
InvalidTokenInTrivia = The token "{0}" is not supported in a trivia.
EndOfFrontMatterNotFound = End of front matter "{0}" was not found.
FrontMatterMarkerMissing = Expects a "{1}" instead of "{2}" because "{0}" is enabled.
WhenConditionSyntaxError = A "when" condition must be preceded by "when", "else" or "case" condition.
ElseConditionSyntaxError = An "else" condition must be preceded by "if", "elseif" or "when" condition.
ElseIfConditionSyntaxError = An "elseif" condition is not allowed within a "when...case" condition.
StatementOutsideLoopError = Unexpected statement outside of loop.
EndStatementNotFound = no matching "end" statement.
EndLiquidStatementNotFound = no matching "end{0}".
UnexpectedTokenInCodeBlock = An unexpected token was encountered in a code block.
UnexpectedFrontMatterMarker = An unexpected front-matter marker "{0}" was encountered outside a front-matter.
OrphanCodeBlockExitError = The code block exit token "`}`}" was encountered before any matching code block enter token "`{`{".
CodeBlockNotAllowedInScriptMode = Invalid code block exit token "`}`}". Code blocks are not allowed when parsing in script only mode.
UnexpectedToken = The parser has encountered an unexpected token "{0}". That is all we know.
UnexpectedTokenOutsideCodeBlock = The parser has encountered an unexpected token "{0}" outside a code block (`{`{ ... `}`}).
ExpectVariable = expecting a variable instead of "{0}".
ForLoopExpectInKeyword = expecting the "in" keyword instead of "{0}": {1}
ExpectEscapeCount = Expects "EscapeCount1-9" but encountered the "{0}" token instead.
WhenExpectAtLeastOneValue = The "when" syntax requires at least one value.
UnexpectedTokenInCase = The parser has encountered an unexpected token "{0}" in the body of a "case" statement. The keyword "when" or "else" is expected.
UnexpectedVariable = The parser has encountered an unexpected variable "{0}". That is all we know.
UnexpectedTokenAfterEnd = the parser expects an end-of-line but encountered the token "{0}" instead.
ExpectAssignmentExpression = Expects an assignment expression: variable = expression
IdentifierPendingStartMissing = Unable to find a pending "{0}" for this "{1}".
UnexpectedTokenAfterCycle = Unexpected token "{0}" after cycle value "{1}". Expecting a comma.
UnexpectedIncludeTemplateName = Unexpected include template name "{0}". Expecting a string or variable path.
UnexpectedVariableInInclude = An invalid variable name "{0}" was used as an argument for the "include" function.
UnexpectedTokenAfterVariable = Unexpected token "{0}" after variable "{1}". Expecting a "{2}".
UnexpectedTokenInLiteral = Unexpected token "{0}" while parsing a variable or literal value.
ParseLiteralFailed = Unable to parse "{0}" as a literal "{1}".
InvalidEscapeChar = The escape character "{0}" is invalid in a string. Only the escape character caret ^ and the following are allowed: 0, ', ", b, f, n, r, t, v, u0000-uFFFF, and x00-xFF.
InvalidLoopVariable = The loop variable "{0}" is invalid.
InvalidLiquidLoopVariable = The liquid loop variable "{0}" is invalid.
LoopVariableDotRequireIdentifier = Invalid token "{0}" in loop. The loop variable "{1}" dot must be followed by an identifier.
DelegateBlockInNestedExpr = A block delegate $$ cannot be used in a nested expression.
DelegateBlockOutsideExpr = A block delegate $$ cannot be used outside an expression statement.
UnexpectedTokenInFunc = An unexpected token "{0}" was encountered while parsing a function call "{1}".
UnexpectedTokenInExpr = An unexpected token "{0}" was encountered while parsing an expression.
UnexpectedLiteralMember = The literal member "{0}" is invalid.
InvalidTokenAfterDot = An unexpected token "{0}" was encountered. A dot operator must be followed by a plain identifier.
ExpectToken = expecting "{0}" instead of "{1}".
ExpectTokenInRightOperator = the right-hand side of the operator must be "{0}" instead of "{1}".
ExprForTopLevelAssignmentOnly = the expression is only allowed for a top level assignment.
ArrayCloseBracketMismatch = An array initializer must have a closing square bracket ] (the token "{0}" was found instead).
StatementDepthLimitReached = The statement depth is set to {0}. A statement cannot be parsed because it has exceeded the limit.
SpanCloseBracketMismatch = A span must have a closing bracket ). The opening "{0}" is matched to an invalid token "{1}".
UnexpectedTokenInObjectInit = An unexpected token "{0}" was encountered in an object initializer. Use a simple identifier for the member name instead of "{1}".
InvalidMemberValue = A member value must be an expression. The token "{0}" is invalid: {1}
UnexpectedTokenInObjectMemberName = Unexpected token "{0}". Expecting a colon : (after identifier "{1}" for object initializer member name).
InvalidMemberName = A member name must be a simple identifier.
InvalidObjectInitMemberName = Literal member "{0}" (of type "{1}") cannot be used for object initializer member name. Only literal string or identifier name are allowed.
InvalidObjectInitMemberNameType = Member type "{0}" ({1}) cannot be used for object initializer member name.
ReadOnlyObjectError = The object is read-only.
ScriptObjectOrArrayOnly = Expecting an instance of "ScriptObject" or "ScriptArray".
CannotSetPropertyOnEmptyObject = Unable to set property on an empty object.
InvalidObjectType = The object type "{0}" is unsupported. Specify a plain class or struct value and try again.
CallContextError = An unexpected error has occured while calling "{0}".
ArgNotFoundForFunc = The function "{1}" does not have an argument named "{0}".
FuncMinArgCountMismatch = {0} argument(s) was or were passed to the function "{1}", which requires at least {2} argument(s).
FuncArgCountMismatch = {0} argument(s) was or were passed to the function "{1}", which requires {2} argument(s).
FuncCastArgTypeError = Unable to cast argument at index {1} (of type "{2}") to type "{3}".
InvalidStatementOutsideLoop = The "{0}" statement can only be used inside for/while loops.
InvalidArgInForLoop = The argument "{0}" is not supported in a "for" statement: {1}
InvalidIterator = The type "{0}" cannot be used as an iterator for a loop block.
InvalidImportType = Unable to import the type "{0}". Make sure the type is a plain script object "`{`{`}`}".
PipeDestNotFunc = Pipe destination "{0}" is not a function.
RuntimeExceptionToString = {0} Parser messages: {1}
CannotSetThisVariable = The variable "this" cannot be set.
UnsupportedOperator = The operator "{0}" is not supported.
OperatorNotImplemented = Operator "{0}" between {1} and {2} is not implemented.
OperatorNotSupportedOnString = The operator "{0}" cannot be used on a string.
OperatorMultipleNotSupportedOnString = The operator "multiply" is not supported on the string expression. Only values that is convertable to integers can use this operator.
UnsupportedTypeForBinaryOperation = The operator "{0}" is unsupported for binary operations between "{1}" (of type "{2}") and "{3}" (of type "{4}").
UnsupportedOperatorForType = The operator "{0}" is unsupported for the "{1}" type.
UnexpectedTokenInUnaryExpr = An unexpected token "{0}" was encountered in a unary expression.
UnaryEvalFailed = Unexpected value "{0}" (of type "{1}"). Cannot negate(-) or positive(+) a non-numeric value.
UnsupportedScope = The scope "{0}" is not supported.
WithEvalFailed = An invalid target property "{0}" was specified for the "with" statement. The target property must be a "ScriptObject" instead of "{1}"
WrapEvalFailed = Expecting a direct function instead of the expression "{0}" ({1}).
CannotSetEmptyQProperty = The ".empty?" property cannot be modified.
NoEmptyQPropertyForNull = Unable to access the ".empty?" property for object "{0}" because the object is null.
NoPropertyForNull = Unable to access the "{1}" property for object "{0}" because the object is null.
CannotSetReadOnlyMember = Unable to set the value of member "{0}" because it is read-only.
AccessMemberOfPrimitiveFailed = Cannot get or set a member on the primitive "{0}" (of type {1}) when accessing member: {2}
NoIndexForNull = Unable to access the indexer for target "{0}" because it is null: {1}
NoNullIndex = Unable to access target "{0}" because the indexer is null: {1}
CannotSetReadOnlyIndexMember = Cannot set the value of read-only member accessed by indexer "{0}": {1}[{0}]
TargetObjectNotList = The value "{0}" (of type "{1}") is not a list. Target "{2}" does not have an accessor for indexing: {3}
TargetFuncIsNull = The target function "{0}" is null.
InvalidTargetFunc = Invalid target function "{0}" (as "{1}").
TemplateHasErrors = This template has errors. Check the "HasError" and "Messages" properties before evaluating a template. Error messages: {0}
UnsupportedRenderMode = The rendering mode "{0}" is not supported. Only "ScriptMode.Default" is supported.
CastToListFailed = Unable to cast the value to a list. Make sure that the value is an array, list or iterator.
CastToStringFailed = Unable to cast the value of type "{0}" to a string.
CastToIntFailed = Unable to cast the value of type "{0}" to an integer.
CastFailed = Unable to cast type "{0}" to "{1}".
PopCultureOverflow = Unable to remove the culture object on the stack, because it would result in more pop than push operations.
PopPipeArgOverflow = Unable to remove the pipe argument on the stack, because it would result in more pop than push operations.
PopSourceFileOverflow = Unable to remove the source file on the stack, because it would result in more pop than push operations.
VariableReadOnly = Unable to set value on a read-only variable "{0}".
BuiltinObjectReadOnly = Built-in objects are read-only and cannot be modified.
InvalidLoopVariableOutsideLoop = The loop variable "{0}" cannot be used outside a loop block.
InvalidLocalVariableInContext = The local variable "{0}" cannot be used in the current context.
InvalidVariableScope = The variable scope "{0}" is not supported.
PopGlobalOverflow = Unable to remove the global object on the stack, because it would result in more pop than push operations.
PopOutputError = An internal error has occured: unexpected pop output for top level writer.
RecurseDepthLimitReached = The recursion depth limit is set to {0}. A recursive call on node "{1}" cannot be performed because it has exceeded the limit.
ExitRecurseMismatch = An internal error has occured: recursion exit does not match recursion enter at node "{0}".
PopVariableScopeOverflow = Unable to remove the variable scope on the stack, because it would result in more pop than push operations.
IterationDepthLimitReached = The iteration limit is set to {0}. A statement has exceeded this limitation: {1}
PopCaseOverflow = Unable to remove the "case" logic on the stack, because it would result in more pop than push operations.
VariableNotFound = The variable "{0}" is undefined.
ExprAccessError = An unexpected error has occured while accessing an expression: {0}
InvalidExprAssignmentTarget = The expression cannot be used as a target for assignment: {0} = ...
LexerStartPositionOutOfRange = The starting position {0} is not within the inclusive range of {1} to {2}.
LexerStuckInLoop = An internal error has occured: the lexer is stuck in an infinite loop.
CurlyBraceMismatch = A closing curly brace `}`} have no matching opening curly brace `{`{ before it.
NoDigitAfterExponent = At least one digit must be specified after an exponent.
UnexpectedEofInString = The parser has reached the end of file unexpectedly while parsing a string not terminated by a "{0}".
UnexpectedEofInVerbatiumString = The parser has reached the end of file unexpectedly while parsing a verbatium string not terminated by a "{0}".
